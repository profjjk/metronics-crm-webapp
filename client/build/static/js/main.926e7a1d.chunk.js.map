{"version":3,"sources":["utils/storage.js","utils/API/index.js","react-query/hooks/useCustomers.jsx","react-query/hooks/useJobs.jsx","react-query/hooks/useParts.jsx","react-query/hooks/useUser.jsx","react-query/hooks/useAuth.jsx","react-query/hooks/useMessages.jsx","react-query/hooks/useRequests.jsx","react-query/queryClient.jsx","react-query/hooks/useData.jsx","react-query/hooks/useToast.jsx","pages/Login/index.jsx","pages/Register/index.jsx","pages/Dashboard/sections/Header.jsx","pages/Dashboard/sections/Messages.jsx","pages/Dashboard/sections/Calendar.jsx","pages/Dashboard/sections/Notifications.jsx","pages/Dashboard/sections/Revenue.jsx","pages/Service/sections/Header.jsx","components/SideNavbar/index.jsx","components/Searchbar/index.jsx","components/AutoComplete/index.jsx","components/Toast/index.jsx","utils/sort.js","pages/Service/sections/ServiceTable.jsx","pages/Service/sections/RequestTable.jsx","pages/Service/sections/UnpaidTable.jsx","pages/Service/sections/ServiceForm.jsx","pages/Dashboard/index.jsx","pages/Service/index.jsx","pages/Customers/sections/Header.jsx","pages/Customers/sections/Customers.jsx","pages/Customers/sections/CustomerForm.jsx","pages/Customers/sections/CustomerHistory.jsx","pages/Customers/index.jsx","pages/Inventory/sections/Header.jsx","pages/Inventory/sections/Inventory.jsx","pages/Inventory/sections/Restock.jsx","pages/Inventory/sections/PartForm.jsx","pages/Inventory/index.jsx","app/routes.jsx","app/App.jsx","index.js"],"names":["getStoredToken","JSON","parse","localStorage","getItem","clearStoredToken","removeItem","baseUrl","customerUrl","jobUrl","partUrl","messageUrl","requestUrl","userUrl","authUrl","authHeader","token","API","getCustomers","axios","get","headers","createCustomer","data","post","updateCustomer","id","put","deleteCustomer","delete","getJobs","createJob","updateJob","deleteJob","deleteJobsByCustomerId","getParts","createPart","updatePart","deletePart","getMessages","updateMessage","deleteMessage","getRequests","deleteRequest","getUser","updateUser","deleteUser","login","register","fetchCustomers","a","console","error","message","window","location","reload","useCustomers","useQuery","fetchJobs","useJobs","fetchParts","useParts","fetchUser","useUser","qc","useQueryClient","useState","user","setUser","_id","enabled","onSuccess","res","username","newUser","setQueryData","clearUser","removeQueries","useAuth","password","response","setItem","stringify","logout","fetchMessages","useMessages","fetchRequests","useRequests","queryClient","QueryClient","defaultOptions","queries","staleTime","cacheTime","refetchOnMount","refetchOnWindowFocus","refetchOnReconnect","useData","queryKey","undefined","useToasts","toasts","setToasts","useEffect","length","interval","setInterval","slice","clearInterval","addToast","newToast","msg","deleteToast","filter","toast","Login","history","useHistory","to","submitHandler","e","preventDefault","formData","Object","fromEntries","FormData","target","push","onSubmit","className","icon","faUser","type","name","defaultValue","required","faLock","Register","status","Header","onClick","Messages","messages","msgList","setMsgList","read","setRead","editMessage","useMutation","invalidateQueries","toggleReadUnread","toggleBtns","document","getElementsByClassName","classList","remove","currentTarget","add","innerHTML","map","email","dayjs","createdAt","format","boolean","mutate","markRead","Calendar","jobs","jobList","setJobList","days","setDays","today","Date","job","i","number","day","serviceDate","subtract","sort","job1","job2","customer","address","city","charCodeAt","selectJob","businessName","Notifications","requests","parts","Revenue","revenue","setRevenue","outstanding","setOutstanding","year","dollarUSLocale","Intl","NumberFormat","totalRevenue","unpaid","isPaid","totalBill","view","formFields","querySelectorAll","value","SideNavbar","page","setPage","path","pathname","links","faHome","faUserFriends","faTools","faWarehouse","faSignOutAlt","Searchbar","placeholder","setSearch","faSearch","onChange","AutoComplete","suggestionsListComponent","activeSuggestion","setActiveSuggestion","filteredSuggestions","setFilteredSuggestions","showSuggestions","setShowSuggestions","userInput","setUserInput","dataset","suggestion","index","street1","suggestions","filtered","toLowerCase","indexOf","Toast","useToast","sortPendingToTop","unshift","splice","ServiceTable","statusFilter","setStatusFilter","searchTerm","setSearchTerm","sortedJobs","includes","invoiceNumber","faChevronDown","RequestTable","requestList","setRequestList","request","contactName","phone","issueNotes","state","UnpaidTable","editJob","markPaid","ServiceForm","existingCustomer","deleteReq","submissionType","found","editCustomer","removeRequest","submit","jobData","trim","serviceNotes","parseFloat","customerData","street2","zipcode","mutateAsync","newCustomer","faHashtag","faDollarSign","defaultChecked","confirm","DashboardPage","msgStatus","msgError","reqStatus","reqError","jobStatus","jobError","partStatus","partError","part","stock","minimum","ServicePage","CustomersTable","customers","customerList","setCustomerList","CustomerForm","deleteJobs","removeCustomer","submitForm","notes","CustomerHistory","customerId","CustomerPage","customerStatus","customerError","Customers","refetchQueries","InventoryTable","partList","setPartList","partNumber","description","update","changeQuantity","faEdit","RestockTable","PartForm","partData","toUpperCase","parseInt","InventoryPage","Restock","Inventory","Routes","exact","component","Dashboard","Service","App","client","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.926e7a1d.chunk.js","sourcesContent":["const getStoredToken = () => {\n    return JSON.parse(localStorage.getItem('metronics'))\n}\n\nconst setStoredToken = token => {\n    localStorage.setItem('metronics', JSON.stringify(token));\n}\n\nconst clearStoredToken = () => {\n    localStorage.removeItem('metronics');\n}\n\nexport { getStoredToken, setStoredToken, clearStoredToken };","import axios from 'axios';\nimport { getStoredToken } from '../storage'\n\nlet baseUrl = \"https://metronics-webapp-server.herokuapp.com/api\"\n\nconst customerUrl = `${baseUrl}/customers`;\nconst jobUrl = `${baseUrl}/jobs`;\nconst partUrl = `${baseUrl}/parts`;\nconst messageUrl = `${baseUrl}/messages`;\nconst requestUrl = `${baseUrl}/requests`;\nconst userUrl = `${baseUrl}/users`;\nconst authUrl = `${baseUrl}/auth`;\n\nconst authHeader = () => {\n  const token = getStoredToken().token;\n  if (token) {\n    return { 'metronics': token };\n  }\n}\n\nconst API = {\n\n  // CUSTOMERS\n  getCustomers() {\n    return axios.get(customerUrl, { headers: authHeader() });\n  },\n  createCustomer(data) {\n    return axios.post(customerUrl, data, { headers: authHeader() });\n  },\n  updateCustomer(id, data) {\n    return axios.put(`${customerUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteCustomer(id) {\n    return axios.delete(`${customerUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // JOBS\n  getJobs() {\n    return axios.get(jobUrl, { headers: authHeader() });\n  },\n  createJob(data) {\n    return axios.post(jobUrl, data, { headers: authHeader() });\n  },\n  updateJob(id, data) {\n    return axios.put(`${jobUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteJob(id) {\n    return axios.delete(`${jobUrl}/${id}`, { headers: authHeader() });\n  },\n  deleteJobsByCustomerId(id) {\n    return axios.delete(`${jobUrl}/clear/${id}`, { headers: authHeader() });\n  },\n\n  // PARTS\n  getParts() {\n    return axios.get(partUrl, { headers: authHeader() });\n  },\n  createPart(data) {\n    return axios.post(partUrl, data, { headers: authHeader() });\n  },\n  updatePart(id, data) {\n    return axios.put(`${partUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deletePart(id) {\n    return axios.delete(`${partUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // MESSAGES\n  getMessages() {\n    return axios.get(messageUrl, { headers: authHeader() });\n  },\n  updateMessage(id, data) {\n    return axios.put(`${messageUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteMessage(id) {\n    return axios.delete(`${messageUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // REQUESTS\n  getRequests() {\n    return axios.get(requestUrl, { headers: authHeader() });\n  },\n  deleteRequest(id) {\n    return axios.delete(`${requestUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // USERS\n  getUser(id) {\n    return axios.get(`${userUrl}/${id}`, { headers: authHeader() });\n  },\n  updateUser(id, data) {\n    return axios.put(`${userUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteUser(id) {\n    return axios.delete(`${userUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // AUTHENTICATION\n  login(data) {\n    return axios.post(`${authUrl}/login`, data);\n  },\n  register(data) {\n    return axios.post(`${authUrl}/register`, data, { headers: authHeader() });\n  }\n}\n\nexport default API;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchCustomers = async () => {\n    try {\n        return await API.getCustomers();\n    } catch(err) {\n        console.error(err.message)\n        window.location.reload();\n    }\n}\n\nconst useCustomers = () => {\n    return useQuery('customers', () => fetchCustomers());\n}\n\nexport default useCustomers;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchJobs = async () => {\n    try {\n        return await API.getJobs();\n    } catch(err) {\n        console.error(err.message);\n        window.location.reload();\n    }\n}\n\nconst useJobs = () => {\n    return useQuery('jobs', () => fetchJobs());\n}\n\nexport default useJobs;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchParts = async () => {\n    try {\n        return await API.getParts();\n    } catch(err) {\n        console.error(err.message)\n        window.location.reload();\n    }\n}\n\nconst useParts = () => {\n    return useQuery('parts', () => fetchParts());\n}\n\nexport default useParts;","import { useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { getStoredToken, clearStoredToken } from '../../utils/storage';\nimport API from \"../../utils/API\";\n\nconst fetchUser = async (id) => {\n    try {\n        return await API.getUser(id);\n    } catch(err) {\n        clearStoredToken();\n        console.error(err.message)\n    }\n}\n\nconst useUser = () => {\n    const qc = useQueryClient();\n    const [user, setUser] = useState(getStoredToken());\n\n    useQuery('user', () => fetchUser(user._id), {\n        enabled: !!user,\n        onSuccess: res => {\n            setUser({\n                _id: res.data._id,\n                username: res.data.username\n            })\n        }\n    })\n\n    const updateUser = newUser => {\n        setUser({\n            _id: newUser._id,\n            username: newUser.username\n        });\n        qc.setQueryData('user', user);\n    }\n\n    const clearUser = () => {\n        setUser(null);\n        qc.setQueryData('user', null);\n        qc.removeQueries(['user', 'jobs', 'customers', 'parts']);\n    }\n\n    return { user, updateUser, clearUser }\n}\n\nexport default useUser;","import useUser from \"./useUser\";\nimport API from '../../utils/API';\nimport {clearStoredToken, setStoredToken} from \"../../utils/storage\";\n\nconst useAuth = () => {\n    const { updateUser, clearUser } = useUser();\n\n    const login = async (username, password) => {\n        try {\n            const response = await API.login(username, password);\n            if (response.data) {\n                setStoredToken({ _id: response.data._id, token: response.data.token });\n            }\n        } catch(err) { console.error(err.message) }\n    }\n\n    const register = async ({ username, password }) => {\n        const newUser = {\n            username: username,\n            password: password\n        }\n        try {\n            const response = await API.register(newUser);\n            // if (response.data) {\n            //     updateUser(response.data);\n            // }\n            return response;\n        } catch(err) { console.error(err.message) }\n    }\n\n    const logout = () => {\n        clearStoredToken();\n        clearUser();\n    }\n\n    return { login, register, logout }\n}\n\nexport default useAuth;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchMessages = async () => {\n    try {\n        return await API.getMessages();\n    } catch(err) {\n        console.error(err.message);\n        window.location.reload();\n    }\n}\n\nconst useMessages = () => {\n    return useQuery('messages', () => fetchMessages());\n}\n\nexport default useMessages;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchRequests = async () => {\n    try {\n        return await API.getRequests();\n    } catch(err) {\n        console.error(err.message);\n        window.location.reload();\n    }\n}\n\nconst useRequests = () => {\n    return useQuery('requests', () => fetchRequests());\n}\n\nexport default useRequests;","import { QueryClient } from 'react-query';\n\nconst defaultQueryClientOptions = {\n    queries: {\n        staleTime: 600000,\n        cacheTime: 900000,\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n        refetchOnReconnect: false,\n    },\n}\n\nconst queryClient = new QueryClient({\n    defaultOptions: defaultQueryClientOptions,\n});\n\nexport default queryClient;\n","import { useQuery } from 'react-query';\n\nconst useData = (queryKey) => {\n    const { data } = useQuery(queryKey, () => {});\n    if (data === undefined || null) {\n        return null;\n    } else {\n        return data;\n    }\n}\n\nexport default useData;","import { useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\n\nconst useToasts = () => {\n    const qc = useQueryClient();\n    const [toasts, setToasts] = useState([]);\n\n    useEffect(() => {\n        if (toasts.length) {\n            const interval = setInterval(() => {\n                setToasts(toasts.slice(1));\n                qc.setQueryData('toasts', toasts.slice(1));\n            }, 5000);\n\n            return () => clearInterval(interval);\n        }\n    }, [toasts]);\n\n    useQuery('toasts', () => {}, {\n        onSuccess: data => {\n            data === undefined ? setToasts([]) : setToasts(data)\n        }\n    });\n\n    const addToast = message => {\n        const newToast = { id: toasts.length, msg: message }\n        setToasts([...toasts, newToast])\n        qc.setQueryData('toasts', [...toasts, newToast]);\n    }\n\n    const deleteToast = id => {\n        setToasts(toasts.filter(toast => toast.id !== id));\n        qc.setQueryData('toasts', toasts.filter(toast => toast.id !== id));\n    }\n\n    return { toasts, addToast, deleteToast }\n}\n\nexport default useToasts;","import { useHistory, Redirect } from 'react-router-dom';\nimport { useAuth, useUser } from \"../../react-query\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons';\nimport './style.scss';\n\nconst Login = () => {\n    const { user } = useUser();\n    const { login } = useAuth();\n    const history = useHistory();\n\n    if (user) {\n        return <Redirect to={'/dashboard'} />;\n    }\n\n    const submitHandler = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const user = {\n                username: formData.username,\n                password: formData.password\n            }\n            await login(user);\n            history.push('/dashboard');\n        } catch(err) { console.error(err) }\n    }\n\n    return (\n        <main>\n            <div id={\"card-login\"}>\n                <h1>Metronics</h1>\n                <form id={\"form-login\"} onSubmit={submitHandler}>\n                    <FontAwesomeIcon className={\"icon-faUser\"} icon={faUser}/>\n                    <label>\n                        Username\n                        <input\n                            type={\"text\"}\n                            name={\"username\"}\n                            defaultValue={\"test\"}\n                            required\n                        />\n                    </label>\n\n                    <FontAwesomeIcon className={\"icon-faLock\"} icon={faLock}/>\n                    <label>\n                        Password\n                        <input\n                            type={\"password\"}\n                            name={\"password\"}\n                            defaultValue={\"password\"}\n                            required\n                        />\n                    </label>\n\n                    <button\n                        className={\"btn-login\"}\n                        type={\"submit\"}\n                    >LOGIN\n                    </button>\n                </form>\n            </div>\n        </main>\n    )\n}\n\nexport default Login;","import { useHistory } from 'react-router-dom';\nimport { useAuth } from \"../../react-query\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons';\n\nconst Register = () => {\n    const { register } = useAuth();\n    const history = useHistory();\n\n    const submitHandler = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const newUser = await register({\n                username: formData.username,\n                password: formData.password\n            });\n            if (newUser.status === 201) history.push('/dashboard');\n        } catch(err) { console.error(err) }\n    }\n\n    return (\n        <main>\n            <div id={\"card-login\"}>\n                <h1>Metronics</h1>\n                <form id={\"form-login\"} onSubmit={submitHandler}>\n                    <FontAwesomeIcon className={\"icon-faUser\"} icon={faUser}/>\n                    <label>\n                        Username\n                        <input\n                            type={\"text\"}\n                            name={\"username\"}\n                            required\n                        />\n                    </label>\n\n                    <FontAwesomeIcon className={\"icon-faLock\"} icon={faLock}/>\n                    <label>\n                        Password\n                        <input\n                            type={\"password\"}\n                            name={\"password\"}\n                            required\n                        />\n                    </label>\n\n                    <button\n                        className={\"btn-login\"}\n                        type={\"submit\"}\n                    >REGISTER\n                    </button>\n                </form>\n            </div>\n        </main>\n    )\n}\n\nexport default Register;","import { useQueryClient } from 'react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n\n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => {\n                qc.setQueryData('view', 'default');\n            }}>Dashboard</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'overview')\n                }}>Overview</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'messages')\n                }}>View Messages</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","import { useEffect, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport API from '../../../utils/API';\nimport dayjs from 'dayjs';\n\nconst Messages = ({ messages }) => {\n    const qc = useQueryClient();\n    const [msgList, setMsgList] = useState(messages);\n    const [read, setRead] = useState(false);\n\n    useEffect(() => {\n            if (read === false) {\n                setMsgList(messages.filter(msg => msg.read === false));\n            } else {\n                setMsgList(messages.filter(msg => msg.read === true));\n            }\n    }, [read, messages]);\n\n    // DATA MUTATIONS\n    const editMessage = useMutation(msg => API.updateMessage(msg.id, msg.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('messages');\n        }\n    });\n\n    // EVENT LISTENERS\n    const markRead = msg => {\n        let boolean = msg.read === false;\n        editMessage.mutate({ id: msg._id, data: {...msg, read: boolean} });\n    }\n\n    const toggleReadUnread = async e => {\n        e.preventDefault();\n        const toggleBtns = document.getElementsByClassName('toggle-btn');\n        for (let btn of toggleBtns) {\n            btn.classList.remove('active');\n        }\n        e.currentTarget.classList.add('active');\n        e.currentTarget.innerHTML === 'Read' ? setRead(true) : setRead(false);\n    }\n\n    return (\n        <section className={\"section-messages\"}>\n            <div className={\"read-toggle\"}>\n                <div className={\"toggle-btn left active\"} onClick={e => toggleReadUnread(e)}>\n                    Unread\n                </div>\n                <div className={\"toggle-btn right\"} onClick={e => toggleReadUnread(e)}>\n                    Read\n                </div>\n            </div>\n\n            {msgList.map(msg => (\n                <div className={\"message\"} key={msg._id}>\n                    <div className={\"msg-header\"}>\n                        <p>From: <strong>{msg.name}</strong></p>\n                        <p>{msg.email}</p>\n                        <p>{dayjs(msg.createdAt).format(\"MMM D, YYYY\")}</p>\n                    </div>\n                    <p>{msg.message}</p>\n                    <p className={\"mark-read text-right\"} onClick={() => markRead(msg)}>\n                        {msg.read === false ? \"Mark as read\" : \"Mark as unread\"}\n                    </p>\n                </div>\n            ))}\n            {msgList.length < 1 ? <p className={\"empty\"}>** No messages to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default Messages;","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport dayjs from 'dayjs';\n\nconst Calendar = ({ jobs }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n    const [days, setDays] = useState([]);\n    const today = dayjs(new Date());\n\n    useEffect(() => {\n        setJobList(jobs.filter(job => job.status !== 'Canceled'));\n        setDays(() => {\n            const days = [];\n            for (let i = 0; i < 5; i++) {\n                days.push({\n                    name: dayjs(today).add(i, 'day').format('dddd'),\n                    number: dayjs(today).add(i, 'day').format('DD')\n                })\n            }\n            return days;\n        })\n    }, [jobs])\n\n    // EVENT LISTENERS\n    const selectJob = (job) => {\n        qc.setQueryData('submissionType', 'edit');\n        qc.setQueryData('selectedJob', job);\n        qc.setQueryData('selectedCustomer', job.customer);\n        qc.setQueryData('view', 'serviceForm');\n    }\n\n    return (\n        <section className={\"section-calendar\"}>\n            <h2>5 DAY SCHEDULE</h2>\n            <div className={\"upcoming\"}>\n                {days.map(day => (\n                    <div className={\"card-day\"} key={day.number}>\n                        <h3>\n                            <span>{day.name}</span>\n                            <span>{day.number}</span>\n                        </h3>\n                            <div>\n                                {jobList.filter(job => (\n                                    dayjs(job.serviceDate).format('dddd') === day.name &&\n                                    dayjs(job.serviceDate) > today.subtract(1, 'day') &&\n                                    dayjs(job.serviceDate) < today.add(5, 'day')\n                                )).sort((job1, job2) => (\n                                    job1.customer.address.city.charCodeAt(0) - job2.customer.address.city.charCodeAt(0)\n                                )).map(job => (\n                                    <p key={job._id} onClick={() => selectJob(job)}>\n                                        {job.customer.businessName}<br/>\n                                        <span>{job.customer.address.city}</span>\n                                    </p>\n                                ))}\n                            </div>\n                    </div>\n                ))}\n            </div>\n        </section>\n    )\n}\n\nexport default Calendar;","import { useHistory } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\n\nconst Notifications = ({ jobs, requests, messages, parts }) => {\n    const qc = useQueryClient();\n    const history = useHistory();\n\n    return (\n        <section className={\"section-notifications\"}>\n            <h2>NOTIFICATIONS</h2>\n            <div>\n                {jobs.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'all');\n                    history.push('/service');\n                }}>\n                    There are new jobs that need to be scheduled.\n                </p> : <></>}\n\n                {requests.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'requests');\n                    history.push('/service');\n                }}>\n                    There are new online requests awaiting your review.\n                </p> : <></>}\n\n                {messages.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'messages');\n                }}>\n                    You have unread messages in your inbox.\n                </p> : <></>}\n\n                {parts.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'restock');\n                    history.push('/inventory');\n                }}>\n                    Some parts need to be re-ordered.\n                </p> : <></>}\n\n                {!parts.length && !jobs.length && !requests.length && !messages.length ?\n                    <p className={\"empty-notifications\"}>\n                        ** You're all caught up. **\n                    </p> : <></>}\n            </div>\n        </section>\n    )\n}\n\nexport default Notifications;","import { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport dayjs from 'dayjs';\n\nconst Revenue = ({ jobs }) => {\n    const qc = useQueryClient();\n    const history = useHistory();\n    const [revenue, setRevenue] = useState(0);\n    const [outstanding, setOutstanding] = useState(0);\n    const year = dayjs(new Date()).format('YYYY');\n    const dollarUSLocale = Intl.NumberFormat('en-US');\n\n    useEffect(() => {\n        let totalRevenue = 0;\n        let unpaid = 0;\n        for (let job of jobs) {\n            if (dayjs(job.serviceDate).format('YYYY') === year && job.isPaid) {\n                totalRevenue += job.totalBill;\n            }\n            if (dayjs(job.serviceDate).format('YYYY') <= year  && !job.isPaid) {\n                unpaid += job.totalBill;\n            }\n        }\n        setRevenue(dollarUSLocale.format(totalRevenue));\n        setOutstanding(dollarUSLocale.format(unpaid));\n    }, [jobs])\n\n    return (\n        <section className={\"section-revenue\"}>\n            <h2>YTD SERVICE REVENUE</h2>\n            <p className={\"revenue\"}>\n                ${revenue}\n            </p>\n            <p className={\"outstanding\"} onClick={() => {\n                qc.setQueryData('view', 'unpaid');\n                history.push('/service');\n            }}>\n                ${outstanding} outstanding\n            </p>\n        </section>\n    )\n}\n\nexport default Revenue;","import { useQueryClient } from 'react-query';\nimport { useData } from '../../../react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n    const view = useData('view');\n    \n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => window.location.reload()}>Service Jobs</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'default');\n                }}>View All</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'requests');\n                }}>View Online Requests</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'unpaid');\n                }}>View Unpaid</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('selectedCustomer', null);\n                    qc.setQueryData('selectedJob', null);\n                    qc.setQueryData('submissionType', 'new');\n                    if (view === 'serviceForm') {\n                        const formFields = document.querySelectorAll('input, textarea');\n                        for (let field of formFields) field.value = \"\";\n                    } else {\n                        qc.setQueryData('view', 'serviceForm');\n                    }\n                }}>Create New</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport { useAuth, useData } from '../../react-query';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome, faUserFriends, faTools, faWarehouse, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\nimport './style.scss';\n\nconst SideNavbar = () => {\n    const qc = useQueryClient()\n    const { logout } = useAuth();\n    const history = useHistory();\n    const [page, setPage] = useState(\"\");\n    const view = useData('view');\n\n    useEffect(() => {\n        const path = window.location.pathname;\n        setPage(path)\n    }, [view]);\n\n    useEffect(() => {\n        const links = document.querySelectorAll('svg')\n        for (let link of links) {\n            link.classList.remove('active');\n        }\n\n        switch (page) {\n            case '/dashboard':\n                links[0].classList.add('active');\n                break;\n            case '/customers':\n                links[1].classList.add('active');\n                break;\n            case '/service':\n                links[2].classList.add('active');\n                break;\n            case '/inventory':\n                links[3].classList.add('active');\n                break;\n        }\n    }, [page]);\n\n    // EVENT LISTENERS\n    const signOut = () => {\n        logout();\n        history.push('/');\n        window.location.reload();\n    }\n\n    return (\n        <header>\n            <nav className={\"navbar\"}>\n                <ul>\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/dashboard');\n                        history.push('/dashboard');\n                    }}>\n                        <FontAwesomeIcon icon={faHome}/>\n                    </li>\n\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/customers');\n                        history.push('/customers');\n                    }}>\n                        <FontAwesomeIcon icon={faUserFriends}/>\n                    </li>\n\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/service');\n                        history.push('/service');\n                    }}>\n                        <FontAwesomeIcon icon={faTools}/>\n                    </li>\n\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/inventory');\n                        history.push('/inventory');\n                    }}>\n                        <FontAwesomeIcon icon={faWarehouse}/>\n                    </li>\n                </ul>\n\n                <button className={\"signOut\"} onClick={signOut}>\n                    <FontAwesomeIcon icon={faSignOutAlt}/>\n                </button>\n            </nav>\n        </header>\n    )\n}\n\nexport default SideNavbar;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport './style.scss';\n\nconst Searchbar = ({ placeholder, setSearch }) => {\n\n  const searchJobs = e => {\n    e.preventDefault();\n    setSearch(e.currentTarget.value);\n  }\n\n    return (\n        <div className={\"searchbar\"}>\n            <FontAwesomeIcon className={\"faSearch\"} icon={faSearch} />\n            <input\n                className={\"search\"}\n                name={\"search\"}\n                onChange={searchJobs}\n                type={\"text\"}\n                placeholder={placeholder}\n            />\n        </div>\n    )\n}\n\nexport default Searchbar;","import { useState } from \"react\";\nimport { useQueryClient } from 'react-query';\nimport { useCustomers } from \"../../react-query\";\nimport './style.scss';\n\nconst AutoComplete = () => {\n  const queryClient = useQueryClient();\n  const { data } = useCustomers()\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const onChange = e => {\n    const suggestions = data.data;\n    const userInput = e.target.value;\n    const filtered = suggestions.filter(suggestion => suggestion.businessName.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    setActiveSuggestion(0);\n    setFilteredSuggestions(filtered);\n    setShowSuggestions(true);\n    setUserInput(e.target.value);\n  }\n\n  const onClick = e => {\n    let customer = data.data.filter(customer => customer._id === e.target.dataset.id);\n    queryClient.setQueryData('submissionType', 'add');\n    queryClient.setQueryData('selectedCustomer', customer[0]);\n    setUserInput(customer[0].businessName);\n    setActiveSuggestion(0);\n    setFilteredSuggestions([]);\n    setShowSuggestions(false);\n  }\n\n  /* const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      let customer = filteredSuggestions[activeSuggestion];\n      queryClient.setQueryData('submissionType', 'add');\n      queryClient.setQueryData('selectedCustomer', filteredSuggestions[activeSuggestion]);\n      setUserInput(customer.businessName);\n      setActiveSuggestion(0);\n      setShowSuggestions(false);\n    } else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n      setActiveSuggestion(activeSuggestion - 1);\n    } else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n      setActiveSuggestion(activeSuggestion + 1);\n    }\n  } */\n\n  let suggestionsListComponent;\n\n  if (showSuggestions && userInput) {\n    if (filteredSuggestions.length) {\n      suggestionsListComponent = (\n        <ul className=\"suggestions\">\n          {filteredSuggestions.map((suggestion, index) => {\n            let className;\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n            return (\n              <li className={className} key={suggestion._id} data-id={suggestion._id} onClick={onClick}>\n                {suggestion.businessName} - {suggestion.address.street1}, {suggestion.address.city}\n              </li>\n            );\n          })}\n        </ul>\n      );\n    }\n  }\n\n  return (\n      <>\n        <input\n            type=\"text\"\n            placeholder=\"Business Name\"\n            name={\"businessName\"}\n            onChange={onChange}\n            // onKeyDown={onKeyDown}\n            value={userInput}\n            required\n        />\n        {filteredSuggestions.length ? suggestionsListComponent : \"\"}\n      </>\n  );\n}\n\nexport default AutoComplete;\n\n// BUG: if AutoComplete suggestion selected using a click event && then user hits the 'enter' key to submit form... crash and burn.","import { useToast } from '../../react-query';\nimport './style.scss';\n\nconst Toast = () => {\n    const { toasts, deleteToast } = useToast();\n\n    return (\n        <footer className={\"toast-container\"}>\n            {toasts.map(toast => (\n                <div className={\"toast-card\"} key={toast.id}>\n                    <button onClick={() => deleteToast(toast.id)}>\n                        X\n                    </button>\n                    <p className={\"toast-message\"}>{toast.msg}</p>\n                </div>\n            ))}\n        </footer>\n    )\n}\n\nexport default Toast;","import dayjs from 'dayjs';\n\nconst sortByServiceDate = jobs => {\n    for (let i = 0; i < jobs.length; i++) {\n        if (dayjs(jobs[i].serviceDate).unix() > dayjs(jobs[0].serviceDate).unix() ||\n            jobs[i].serviceDate === \"\") {\n            jobs.unshift(jobs.splice(i,1)[0]);\n        } else {\n            for (let j = 1; j < i; j++) {\n                if (dayjs(jobs[i].serviceDate).unix() < dayjs(jobs[j-1].serviceDate).unix() &&\n                    dayjs(jobs[i].serviceDate).unix() > dayjs(jobs[0].serviceDate).unix()) {\n                    jobs.splice(j,0,jobs.splice(i,1)[0]);\n                }\n            }\n        }\n    }\n    return jobs;\n}\n\nconst sortPendingToTop = jobs => {\n    for (let i = 0; i < jobs.length; i++) {\n        if (jobs[i].status === \"Pending\") {\n            jobs.unshift(jobs.splice(i,1)[0]);\n        }\n    }\n    return jobs;\n}\n\n\nexport { sortPendingToTop, sortByServiceDate };","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport { sortPendingToTop } from '../../../utils/sort';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport dayjs from 'dayjs';\n\nconst ServiceTable = ({ jobs }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n    const [statusFilter, setStatusFilter] = useState(\"\");\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Filter by status\n    useEffect(() => {\n        const sortedJobs = sortPendingToTop(jobs);\n        if (statusFilter === \"Pending\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Pending\"));\n        } else if (statusFilter === \"Scheduled\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Scheduled\"));\n        } else if (statusFilter === \"Completed\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Completed\"));\n        } else if (statusFilter === \"Canceled\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Canceled\"));\n        } else {\n            setJobList(sortedJobs);\n        }\n    }, [statusFilter, jobs]);\n\n    // Filter by search term\n    useEffect(() => {\n        const sortedJobs = sortPendingToTop(jobs);\n        if (searchTerm !== \"\") {\n            setJobList(\n                sortedJobs.filter(job => {\n                    return job.customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        (job.customer.address.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                        (job.serviceDate !== null && job.serviceDate.includes(searchTerm)) ||\n                        (job.invoiceNumber !== null && job.invoiceNumber.includes(searchTerm));\n                })\n            );\n        } else {\n            setJobList(sortedJobs);\n        }\n    }, [searchTerm, jobs]);\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n\n                <div className={\"dropdown\"}>\n                    <FontAwesomeIcon className={\"faChevronDown\"} icon={faChevronDown}/>\n                    <select onChange={e => setStatusFilter(e.target.value)}>\n                        <option>Filter by status</option>\n                        <option>Pending</option>\n                        <option>Scheduled</option>\n                        <option>Completed</option>\n                        <option>Canceled</option>\n                    </select>\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-job\"}>\n                    <th className={\"text-center\"}>Service Date</th>\n                    <th>Business Name</th>\n                    <th>City</th>\n                    <th className={\"text-center\"}>Invoice #</th>\n                    <th className={\"text-center\"}>Status</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {jobList.map(job => (\n                    <tr className={\"table-item tr-job clickable\"} key={job._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'edit');\n                        qc.setQueryData('selectedJob', job);\n                        qc.setQueryData('selectedCustomer', job.customer);\n                        qc.setQueryData('view', 'serviceForm');\n                    }}>\n                        <td className={\"text-center\"}>{job.serviceDate ? dayjs(job.serviceDate).format(\"MMM D, YYYY\") : \"--\"}</td>\n                        <td>{job.customer.businessName}</td>\n                        <td>{job.customer.address.city}</td>\n                        <td className={\"text-center\"}>{job.invoiceNumber ? job.invoiceNumber : \"--\"}</td>\n                        <td className={\"text-center\"}>{job.status}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {jobList.length < 1 ? <p className={\"empty\"}>** No jobs to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default ServiceTable;\n","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport dayjs from 'dayjs';\n\nconst RequestTable = ({ requests }) => {\n    const qc = useQueryClient();\n    const [requestList, setRequestList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Filter by search term\n    useEffect(() => {\n        setRequestList(\n            requests.filter(request => {\n                return request.customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                    (request.customer.address.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                    (request.customer.contactName.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                    (request.customer.phone.includes(searchTerm));\n            })\n        );\n    }, [searchTerm, requests]);\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-job\"}>\n                    <th className={\"text-center\"}>Date Submitted</th>\n                    <th>Business Name</th>\n                    <th>City</th>\n                    <th className={\"text-center\"}>Contact Name</th>\n                    <th className={\"text-center\"}>Phone #</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {requestList.map(request => (\n                    <tr className={\"table-item tr-job clickable\"} key={request._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'new');\n                        qc.setQueryData('selectedJob', {\n                            _id: request._id,\n                            status: \"Pending\",\n                            issueNotes: request.issueNotes\n                        });\n                        qc.setQueryData('selectedCustomer', request.customer);\n                        qc.setQueryData('view', 'serviceForm');\n                        qc.setQueryData('deleteRequest', true);\n                    }}>\n                        <td className={\"text-center\"}>{dayjs(request.createdAt).format(\"MMM D, YYYY\")}</td>\n                        <td>{request.customer.businessName}</td>\n                        <td>{request.customer.address.city}, {request.customer.address.state}</td>\n                        <td className={\"text-center\"}>{request.customer.contactName}</td>\n                        <td className={\"text-center\"}>{request.customer.phone}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {requestList.length < 1 ? <p className={\"empty\"}>** No online requests to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default RequestTable;","import { useEffect, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport API from '../../../utils/API';\nimport dayjs from 'dayjs';\n\nconst UnpaidTable = ({ jobs }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const dollarUSLocale = Intl.NumberFormat('en-US');\n\n    // useEffect(() => {\n    //     setJobList(jobs.filter(job => !job.isPaid && job.status === 'Completed'));\n    // }, [jobs]);\n\n    // Filter by search term\n    useEffect(() => {\n        if (searchTerm === \"\") {\n            setJobList(jobs.filter(job => !job.isPaid && job.status === 'Completed'));\n        } else {\n            setJobList(\n                jobList.filter(job => {\n                    return job.customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        (job.customer.address.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                        (job.customer.contactName.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                        (job.customer.phone.includes(searchTerm));\n                })\n            );\n        }\n    }, [searchTerm, jobs]);\n\n    // MUTATION\n    const editJob = useMutation(job => API.updateJob(job.id, job.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n\n    const markPaid = (job) => {\n        editJob.mutate({ id: job._id, data: {...job, isPaid: true} });\n    }\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-job\"}>\n                    <th className={\"text-center\"}>Service Date</th>\n                    <th>Business Name</th>\n                    <th className={\"text-center\"}>Invoice #</th>\n                    <th className={\"text-center\"}>Total Bill</th>\n                    <th/>\n                </tr>\n                </thead>\n\n                <tbody>\n                {jobList.map(job => (\n                    <tr className={\"table-item tr-job\"} key={job._id}>\n                        <td className={\"text-center\"}>{job.serviceDate ? dayjs(job.serviceDate).format(\"MMM D, YYYY\") : \"--\"}</td>\n                        <td>{job.customer.businessName}</td>\n                        <td className={\"text-center\"}>{job.invoiceNumber ? job.invoiceNumber : \"--\"}</td>\n                        <td className={\"text-center\"}>$ {dollarUSLocale.format(job.totalBill)}</td>\n                        <td className={\"mark-paid text-center\"} onClick={() => markPaid(job)}>Mark as paid</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {jobList.length < 1 ? <p className={\"empty\"}>** No unpaid jobs to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default UnpaidTable;","import { useEffect } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useCustomers, useData, useToast } from '../../../react-query';\nimport { AutoComplete } from '../../../components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faHashtag, faDollarSign } from '@fortawesome/free-solid-svg-icons';\nimport API from '../../../utils/API';\n\nconst ServiceForm = () => {\n    const qc = useQueryClient();\n    const { status, data, error } = useCustomers();\n    const { addToast } = useToast();\n    const existingCustomer = useData('existingCustomer');\n    const deleteReq = useData('deleteRequest');\n    const submissionType = useData('submissionType');\n    const customer = useData('selectedCustomer');\n    const job = useData('selectedJob');\n    const view = useData('view');\n    const dollarUSLocale = Intl.NumberFormat('en-US');\n\n    useEffect(() => {\n        if (status === 'success' && view === 'requests') {\n            const found = data.data.filter(data => {\n                return customer.address.street1.toLowerCase() === data.address.street1.toLowerCase()\n                    && customer.address.city.toLowerCase() === data.address.city.toLowerCase();\n            })\n            if (found.length > 0) qc.setQueryData('existingCustomer', found[0])\n        }\n    }, []);\n\n    // DATA MUTATIONS\n    const createJob = useMutation(job => API.createJob(job), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n    const editJob = useMutation(job => API.updateJob(job.id, job.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n    const deleteJob = useMutation(id => API.deleteJob(id), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n    const createCustomer = useMutation(customer => API.createCustomer(customer), {\n        onSuccess: () => {\n            qc.invalidateQueries('customers');\n        }\n    });\n    const editCustomer = useMutation(customer => API.updateCustomer(customer.id, customer.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('customers');\n        }\n    });\n    const deleteRequest = useMutation(id => API.deleteRequest(id), {\n        onSuccess: () => {\n            qc.invalidateQueries('requests');\n        }\n    })\n\n    // EVENT HANDLERS\n    const removeJob = id => {\n        let answer = window.confirm(\"Are you sure you want to delete?\\nThis cannot be undone.\");\n        if (answer) deleteJob.mutate(id);\n        addToast(\"Job Deleted\");\n    };\n    const removeRequest = id => {\n        deleteRequest.mutate(id);\n    };\n    const submit = async e => {\n        e.preventDefault();\n        try {\n            const formData = Object.fromEntries(new FormData(e.target));\n            const jobData = {\n                status: formData.status,\n                serviceDate: formData.serviceDate,\n                invoiceNumber: formData.invoiceNumber.trim(),\n                issueNotes: formData.issueNotes.trim(),\n                serviceNotes: formData.serviceNotes.trim(),\n                totalBill: parseFloat(formData.totalBill.trim()),\n                isPaid: formData.isPaid === \"on\",\n            }\n            const customerData = {\n                businessName: formData.businessName.trim(),\n                contactName: formData.contactName.trim(),\n                phone: formData.phone.trim(),\n                address: {\n                    street1: formData.street1.trim(),\n                    street2: formData.street2.trim(),\n                    city: formData.city.trim(),\n                    state: formData.state.trim(),\n                    zipcode: formData.zipcode.trim()\n                },\n            }\n            if (submissionType === 'add') {\n                editCustomer.mutate({ id: customer._id, data: customerData});\n                createJob.mutate({ customer: customer._id, ...jobData });\n                if(deleteReq) {\n                    removeRequest(job._id)\n                    qc.setQueryData('deleteRequest', null);\n                    qc.setQueryData('view', 'requests');\n                    return;\n                }\n                qc.setQueryData('view', 'default');\n                return\n            }\n            if (submissionType === 'edit') {\n                editCustomer.mutate({ id: customer._id, data: customerData});\n                editJob.mutate({ id: job._id, data: jobData });\n                qc.setQueryData('view', 'default');\n                return\n            }\n            if (submissionType === 'new') {\n                const newCustomer = await createCustomer.mutateAsync(customerData);\n                createJob.mutate({ customer: newCustomer.data._id, ...jobData });\n                if(deleteReq) {\n                    removeRequest(job._id)\n                    qc.setQueryData('deleteRequest', null);\n                    qc.setQueryData('view', 'requests');\n                    return;\n                }\n                qc.setQueryData('view', 'default');\n            }\n        } catch(err) { console.error(err) }\n    };\n    const useExisting = () => {\n        qc.setQueryData('submissionType', 'add');\n        qc.setQueryData('selectedCustomer', {\n            ...customer,\n            _id: existingCustomer._id,\n            businessName: existingCustomer.businessName,\n            address: existingCustomer.address\n        });\n        qc.setQueryData('existingCustomer', null)\n    }\n\n    switch (status) {\n        case \"loading\":\n            return <h1>Loading</h1>;\n        case \"error\":\n            return <h4>Error: {error.message}</h4>;\n        default:\n            if (existingCustomer) {\n                return (\n                    <section>\n                        <div className={\"use-existing-customer\"}>\n                            <h4>The address matches an existing customer:</h4>\n                            <p className={\"match\"}>\n                                <strong>{existingCustomer.businessName}</strong><br/>\n                                {existingCustomer.address.street1} {existingCustomer.address.street2 ? (\", \" + existingCustomer.address.street2) : <></>}<br/>\n                                {existingCustomer.address.city}, {existingCustomer.address.state} {existingCustomer.address.zipcode}\n                            </p>\n                            <div>\n                                <p>Add this job to <strong>{existingCustomer.businessName}</strong>?</p>\n                                <button onClick={useExisting}>Yes</button>\n                                <button onClick={() => qc.setQueryData('existingCustomer', null)}>No</button>\n                            </div>\n                        </div>\n                    </section>\n                )\n            } else {\n                return (\n                    <section>\n                        <form id={\"form-service\"} onSubmit={submit}>\n                            <div className={\"job-area\"}>\n                                <label>\n                                    Service Date\n                                    <input className={\"input-sm\"} type={\"date\"} name={\"serviceDate\"}\n                                           defaultValue={job ? job.serviceDate : \"\"}/>\n                                </label>\n\n                                <label>\n                                    Status\n                                    <div className={\"dropdown\"}>\n                                        <FontAwesomeIcon className={\"faChevronDown\"} icon={faChevronDown}/>\n                                        <select name={\"status\"}>\n                                            {job ? <option>{job.status}</option> : <></>}\n                                            {job && job.status === \"Pending\" ? \"\" : <option>Pending</option>}\n                                            {job && job.status === \"Scheduled\" ? \"\" : <option>Scheduled</option>}\n                                            {job && job.status === \"Completed\" ? \"\" : <option>Completed</option>}\n                                            {job && job.status === \"Canceled\" ? \"\" : <option>Canceled</option>}\n                                        </select>\n                                    </div>\n                                </label>\n\n                                <label>\n                                    Invoice\n                                    <div className={\"invoiceInput\"}>\n                                        <FontAwesomeIcon className={\"faHashtag\"} icon={faHashtag}/>\n                                        <input type={\"text\"} name={\"invoiceNumber\"}\n                                               defaultValue={job ? job.invoiceNumber : \"\"}/>\n                                    </div>\n\n                                </label>\n\n                                <label>\n                                    Total Bill\n                                    <div className={\"dollarInput\"}>\n                                        <FontAwesomeIcon className={\"faDollarSign\"} icon={faDollarSign}/>\n                                        <input type={\"text\"} name={\"totalBill\"}\n                                               defaultValue={job ? dollarUSLocale.format(job.totalBill) : \"0\"}/>\n                                    </div>\n                                </label>\n\n                                <label className={\"text-center\"}>\n                                    Paid?\n                                    <input className={\"checkbox\"} type={\"checkbox\"} name={\"isPaid\"}\n                                           defaultChecked={job && job.isPaid === true ? \"on\" : undefined}/>\n                                </label>\n                            </div>\n\n                            <div className={\"customer-area\"}>\n                                <div>\n                                    <label>\n                                        Contact Information\n                                        {view !== 'requests' && existingCustomer ? (\n                                            <AutoComplete />\n                                        ) : (\n                                            <input type={\"text\"} name={\"businessName\"} placeholder={\"Business Name\"} required\n                                                   defaultValue={customer ? customer.businessName : \"\"}/>\n                                        )}\n                                        <input type={\"text\"} name={\"contactName\"} placeholder={\"Contact Person\"}\n                                               defaultValue={customer ? customer.contactName : \"\"}/>\n                                        <input type={\"text\"} name={\"phone\"} placeholder={\"Phone #\"} required\n                                               defaultValue={customer ? customer.phone : \"\"}/>\n                                    </label>\n                                </div>\n\n                                <div>\n                                    <label className={\"address\"}>\n                                        Address\n                                        <input type={\"text\"} name={\"street1\"} placeholder={\"Street Address\"} required\n                                               defaultValue={customer ? customer.address.street1 : \"\"}/>\n                                        <input type={\"text\"} name={\"street2\"} placeholder={\"Unit or Building #\"}\n                                               defaultValue={customer ? customer.address.street2 : \"\"}/>\n                                        <div>\n                                            <input type={\"text\"} name={\"city\"} placeholder={\"City\"} required\n                                                   defaultValue={customer ? customer.address.city : \"\"}/>\n                                            <input className={\"text-center\"} type={\"text\"} name={\"state\"} defaultValue={\"CA\"} required/>\n                                            <input type={\"text\"} name={\"zipcode\"} placeholder={\"Zip Code\"} required\n                                                   defaultValue={customer ? customer.address.zipcode : \"\"}/>\n                                        </div>\n                                    </label>\n                                </div>\n                            </div>\n\n                            <div className={\"notes-area\"}>\n                                <label>\n                                    Description of Problem\n                                    <textarea name={\"issueNotes\"} defaultValue={job ? job.issueNotes : \"\"}/>\n                                </label>\n\n                                <label>\n                                    Service Notes\n                                    <textarea name={\"serviceNotes\"} defaultValue={job ? job.serviceNotes : \"\"}/>\n                                </label>\n                            </div>\n\n                            <div className={\"button-area\"}>\n                                <button className={\"btn-form\"} type={\"submit\"}>\n                                    Save\n                                </button>\n\n                                <button className={\"btn-form\"} onClick={() => {\n                                    const location = window.location.pathname;\n                                    if (location === '/customers') {\n                                        qc.setQueryData('selectedJob', null);\n                                        qc.setQueryData('view', 'customerForm');\n                                    } else {\n                                        qc.setQueryData('selectedCustomer', null);\n                                        qc.setQueryData('selectedJob', null);\n                                        qc.setQueryData('view', 'default');\n                                    }\n                                }}>\n                                    Cancel\n                                </button>\n\n                                {job && job._id ? (<button className={\"btn-form delete\"} onClick={() => {\n                                    if (view === 'requests') {\n                                        removeRequest(job._id)\n                                    } else {\n                                        removeJob(job._id);\n                                    }\n                                    qc.setQueryData('selectedCustomer', null);\n                                    qc.setQueryData('selectedJob', null);\n                                    qc.setQueryData('view', 'default');\n                                }}>\n                                    Delete\n                                </button>) : <></>}\n                            </div>\n                        </form>\n                    </section>\n                );\n            }\n    }\n}\n\nexport default ServiceForm;","import { Redirect } from 'react-router-dom';\nimport { useData, useMessages, useJobs, useUser, useRequests, useParts } from '../../react-query';\nimport { Calendar, Header, MessageTable, Notifications, Revenue } from './sections';\nimport { ServiceForm } from '../Service/sections';\nimport './style.scss';\n\nconst DashboardPage = () => {\n    const { user } = useUser();\n    const { status: msgStatus, data: messages, error: msgError } = useMessages();\n    const { status: reqStatus, data: requests, error: reqError } = useRequests();\n    const { status: jobStatus, data: jobs, error: jobError } = useJobs();\n    const { status: partStatus, data: parts, error: partError } = useParts();\n    const view = useData('view');\n\n    // REDIRECTS\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(jobStatus || msgStatus || reqStatus || partStatus) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {jobError.message} | {msgError.message} | {reqError.message} | {partError.message}</h4>;\n        default:\n            if (view === 'messages') {\n                return (\n                    <main className={\"container\"} id={\"dashboard\"}>\n                        <Header />\n                        <MessageTable messages={messages.data} />\n                    </main>\n                )\n            } else if (view === 'serviceForm') {\n                return (\n                    <main className={\"container\"} id={\"dashboard\"}>\n                        <Header />\n                        <ServiceForm />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"} id={\"dashboard\"}>\n                        <Header />\n                        <div className={\"dashboard-top\"}>\n                            <Notifications\n                                jobs={jobStatus === 'success' ? jobs.data.filter(job => job.status === 'Pending') : []}\n                                requests={reqStatus === 'success' ? requests.data : []}\n                                messages={msgStatus === 'success' ? messages.data.filter(msg => !msg.read) : []}\n                                parts={partStatus === 'success' ? parts.data.filter(part => part.stock < part.minimum) : []}\n                            />\n\n                            <Revenue jobs={jobs.data.filter(job => job.status === 'Completed')} />\n                        </div>\n                        <Calendar jobs={jobs.data}/>\n                    </main>\n                )\n            }\n    }\n}\n\nexport default DashboardPage;\n\n// TODO: Add some interesting data on the top bar...\n// - Number of jobs completed this year\n// - Total number of customers\n// - Unpaid invoices (need to add to data)\n// - Total amount billed (need to add to data)","import { Redirect } from 'react-router-dom';\nimport { useUser, useData, useJobs, useRequests } from '../../react-query';\nimport { Header, ServiceTable, RequestTable, UnpaidTable, ServiceForm } from './sections';\nimport './style.scss';\n\nconst ServicePage = () => {\n    const { user } = useUser();\n    const { status: jobStatus, data: jobs, error: jobError } = useJobs();\n    const { status: reqStatus, data: requests, error: reqError } = useRequests();\n    const view = useData('view');\n\n    // REDIRECTS\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(jobStatus || reqStatus) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {jobError.message} {reqError.message}</h4>;\n        default:\n            if (view === 'serviceForm') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <ServiceForm />\n                    </main>\n                )\n            } else if (view === 'requests') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <RequestTable requests={requests.data} />\n                    </main>\n                )\n            } else if (view === 'unpaid') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <UnpaidTable jobs={jobs.data} />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <ServiceTable jobs={jobs.data} />\n                    </main>\n                )\n            }\n    }\n}\n\nexport default ServicePage;\n","import { useQueryClient } from 'react-query';\nimport { useData } from '../../../react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n    const view = useData('view');\n\n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => {\n                qc.setQueryData('view', 'default');\n            }}>Customers</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'default');\n                }}>View All</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('submissionType', 'new');\n                    qc.setQueryData('selectedCustomer', null);\n\n                    if (view === 'customerForm') {\n                        const formFields = document.querySelectorAll('input, textarea');\n                        for (let field of formFields) field.value = \"\";\n                    } else {\n                        qc.setQueryData('view', 'customerForm');\n                    }\n                }}>Create New</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\n\nconst CustomersTable = ({ customers }) => {\n    const qc = useQueryClient();\n    const [customerList, setCustomerList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Search for customers\n    useEffect(() => {\n            if (searchTerm === \"\") {\n                setCustomerList(customers);\n                return;\n            }\n            setCustomerList(\n                customers.filter(customer => {\n                    return customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        customer.address.city.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        customer.phone.includes(searchTerm)\n                })\n            );\n    }, [searchTerm, customers]);\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-customer\"}>\n                    <th>Business Name</th>\n                    <th>Address</th>\n                    <th className={\"text-center\"}>Contact</th>\n                    <th className={\"text-center\"}>Phone #</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {customerList.map(customer => (\n                    <tr className={\"table-item tr-customer clickable\"} key={customer._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'edit');\n                        qc.setQueryData('selectedCustomer', customer);\n                        qc.setQueryData('view', 'customerForm');\n                    }}>\n                        <td>{customer.businessName}</td>\n                        <td>\n                            {customer.address.street1}\n                            {customer.address.street2 !== \"\" ? \", \" + customer.address.street2 + \", \" : \", \"}\n                            {customer.address.city}, {customer.address.state} {customer.address.zipcode}\n                        </td>\n                        <td className={\"text-center\"}>{customer.contactName ? customer.contactName : \"--\"}</td>\n                        <td className={\"text-center\"}>{customer.phone}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {customerList.length < 1 ? <p className={\"empty\"}>** No customers to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default CustomersTable;\n\n// TODO: add pagination for displaying data","import { useMutation, useQueryClient } from 'react-query';\nimport { useData, useToast } from '../../../react-query';\nimport API from '../../../utils/API';\n\nconst CustomerForm = () => {\n    const qc = useQueryClient();\n    const { addToast } = useToast();\n    const customer = useData('selectedCustomer');\n    const submissionType = useData('submissionType');\n\n    // DATA MUTATIONS\n    const createCustomer = useMutation(customer => API.createCustomer(customer), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"customers\");\n        }\n    });\n    const editCustomer = useMutation(customer => API.updateCustomer(customer.id, customer.data), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"customers\");\n            qc.invalidateQueries(\"jobs\");\n        }\n    });\n    const deleteCustomer = useMutation(id => API.deleteCustomer(id), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"customers\");\n        },\n    });\n    const deleteJobs = useMutation(id => API.deleteJobsByCustomerId(id), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"jobs\");\n        }\n    });\n\n    // EVENT LISTENERS\n    const removeCustomer = async () => {\n        // TODO: create custom modal for confirmation so the page doesn't reload.\n        let answer = window.confirm(\"Are you sure you want to delete?\\n\" +\n            \"This will delete the customer and their service history from the database.\\n\" +\n            \"This cannot be undone.\");\n        if (answer) {\n            await deleteCustomer.mutate(customer._id);\n            deleteJobs.mutate(customer._id);\n            qc.setQueryData('selectedCustomer', null);\n            qc.setQueryData('view', 'default');\n        }\n        addToast(\"Customer Deleted\");\n    }\n    const submitForm = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const customerData = {\n                businessName: formData.businessName.trim(),\n                contactName: formData.contactName.trim(),\n                phone: formData.phone.trim(),\n                address: {\n                    street1: formData.street1.trim(),\n                    street2: formData.street2.trim(),\n                    city: formData.city.trim(),\n                    state: formData.state.trim(),\n                    zipcode: formData.zipcode.trim()\n                },\n                notes: formData.notes.trim()\n            }\n            if (submissionType === 'edit') {\n                editCustomer.mutate({ id: customer._id, data: customerData});\n                qc.setQueryData('view', 'default');\n                return\n            }\n            if (submissionType === 'new') {\n                await createCustomer.mutateAsync(customerData);\n                qc.setQueryData('view', 'default');\n            }\n        } catch(err) { console.error(err) }\n    };\n\n    return (\n        <section>\n            <form id={\"form-customer\"} onSubmit={submitForm}>\n                <div className={\"customer-area\"}>\n                    <div>\n                        <label>\n                            Contact Information\n                            <input type={\"text\"} name={\"businessName\"} placeholder={\"Business Name\"} required\n                                   defaultValue={customer ? customer.businessName : \"\"}/>\n                            <input type={\"text\"} name={\"contactName\"} placeholder={\"Contact Person\"}\n                                   defaultValue={customer ? customer.contactName : \"\"}/>\n                            <input type={\"text\"} name={\"phone\"} placeholder={\"Phone #\"} required\n                                   defaultValue={customer ? customer.phone : \"\"}/>\n                        </label>\n                    </div>\n\n                    <div>\n                        <label className={\"address\"}>\n                            Address\n                            <input type={\"text\"} name={\"street1\"} placeholder={\"Street Address\"} required\n                                   defaultValue={customer ? customer.address.street1 : \"\"}/>\n                            <input type={\"text\"} name={\"street2\"} placeholder={\"Unit or Building #\"}\n                                   defaultValue={customer ? customer.address.street2 : \"\"}/>\n                            <div>\n                                <input type={\"text\"} name={\"city\"} placeholder={\"City\"} required\n                                       defaultValue={customer ? customer.address.city : \"\"}/>\n                                <input className={\"text-center\"} type={\"text\"} name={\"state\"} defaultValue={\"CA\"} required/>\n                                <input type={\"text\"} name={\"zipcode\"} placeholder={\"Zip Code\"} required\n                                       defaultValue={customer ? customer.address.zipcode : \"\"}/>\n                            </div>\n                        </label>\n                    </div>\n                </div>\n\n                <div className={\"notes-area\"}>\n                    <label>\n                        Notes\n                        <textarea name={\"notes\"} defaultValue={customer ? customer.notes : \"\"} />\n                    </label>\n                </div>\n\n                <div className={\"button-area\"}>\n                    <button className={\"btn-form\"} type={\"submit\"}>\n                        Save\n                    </button>\n\n                    <button className={\"btn-form\"} onClick={() => {\n                        qc.setQueryData('selectedCustomer', null);\n                        qc.setQueryData('view', 'default');\n                    }}>\n                        Cancel\n                    </button>\n\n                    {customer && customer._id ? (<button className={\"btn-form delete\"} onClick={removeCustomer}>\n                        Delete\n                    </button>) : <></>}\n                </div>\n            </form>\n        </section>\n    )\n}\n\nexport default CustomerForm;\n","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport dayjs from 'dayjs';\n\nconst CustomerHistory = ({ jobs, customerId }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n\n    useEffect(() => {\n        const history = jobs.filter(job => job.customer._id === customerId && job.status === 'Completed');\n        setJobList(history);\n    }, [customerId, jobs])\n\n    return (\n        <section className={\"customer-history\"}>\n            <h2>Service History</h2>\n            <table>\n                <thead>\n                <tr className={\"tr-history\"}>\n                    <th className={\"text-center\"}>Date Completed</th>\n                    <th>Service Notes</th>\n                </tr>\n                </thead>\n\n                <tbody className={\"tbody-history\"}>\n                {jobList.map(job => (\n                    <tr className={\"table-item clickable tr-history\"} key={job._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'edit');\n                        qc.setQueryData('selectedJob', job);\n                        qc.setQueryData('view', 'serviceForm');\n                    }}>\n                        <td className={\"text-center\"}>{job.serviceDate ? dayjs(job.serviceDate).format(\"MMM DD YYYY\") : \"--\"}</td>\n                        <td>{job.serviceNotes ? job.serviceNotes : \"\"}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {jobList.length < 1 ? <p className={\"empty\"}>** No job history to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default CustomerHistory;\n","import { Redirect } from 'react-router-dom';\nimport { useData, useCustomers, useUser, useJobs } from '../../react-query';\nimport { Header, CustomersTable, CustomerHistory, CustomerForm } from './sections';\nimport { ServiceForm } from '../Service/sections';\nimport './style.scss';\n\nconst CustomerPage = () => {\n    const { user } = useUser();\n    const { status: customerStatus, data: customers, error: customerError } = useCustomers();\n    const { status: jobStatus, data: jobs, error: jobError } = useJobs();\n    const customer = useData('selectedCustomer');\n    const view = useData('view');\n\n    // REDIRECT\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(customerStatus || jobStatus) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {customerError.message} {jobError.message}</h4>;\n        default:\n            if (view === 'customerForm') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <CustomerForm />\n                        {customer ? <CustomerHistory jobs={jobs.data} customerId={customer._id} /> : <></>}\n                    </main>\n                )\n            } else if (view === 'serviceForm') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <ServiceForm />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <CustomersTable customers={customers.data} />\n                    </main>\n                )\n            }\n    }\n}\n\nexport default CustomerPage;\n","import { useQueryClient } from 'react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n\n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => {\n                qc.setQueryData('view', 'default');\n            }}>Inventory</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.refetchQueries('parts');\n                    qc.setQueryData('view', 'default');\n                }}>View All</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'restock');\n                }}>View Low Stock</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('submissionType', 'new');\n                    qc.setQueryData('view', 'newPart');\n                }}>Create New</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport { useQueryClient, useMutation } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport API from '../../../utils/API';\n\nconst InventoryTable = ({ parts }) => {\n    const qc = useQueryClient();\n    const [partList, setPartList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Search for parts\n    useEffect(() => {\n            if (searchTerm === \"\") {\n                setPartList(parts);\n                return;\n            }\n            setPartList(\n                parts.filter(part => {\n                    return part.partNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        part.description.toLowerCase().includes(searchTerm.toLowerCase());\n                })\n            );\n    }, [searchTerm, parts]);\n\n    // DATA MUTATIONS\n    const update = useMutation(part => API.updatePart(part.id, part.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('parts');\n        }\n    });\n\n    // EVENT LISTENERS\n    const changeQuantity = (e, part) => {\n        const operator = e.target.innerHTML;\n        if (operator === '+') {\n            update.mutate({ id: part._id,  data: {...part, stock: part.stock + 1} });\n        } else {\n            update.mutate({ id: part._id,  data: {...part, stock: part.stock - 1} });\n        }\n    }\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-part\"}>\n                    <th>Part #</th>\n                    <th>Description</th>\n                    <th className={\"text-center\"}>In Stock</th>\n                    <th className={\"text-center\"}>Change Quantity</th>\n                    <th className={\"text-center\"}>Edit</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {partList.map(part => (\n                    <tr className={\"table-item tr-part\"} key={part._id} id={part._id}>\n                        <td>{part.partNumber}</td>\n                        <td>{part.description}</td>\n                        <td className={`text-center ${part.stock < part.minimum ? \"red bold\" : \"\"}`}>{part.stock}</td>\n                        <td className={\"inventory-buttons\"}>\n                            <div className={\"quantity\"} onClick={e => changeQuantity(e, part)}>&#43;</div>\n                            <div className={\"quantity\"} onClick={e => changeQuantity(e, part)}>&#8722;</div>\n                        </td>\n                        <td className={\"inventory-buttons\"}>\n                            <div className={\"select\"} onClick={() => {\n                                qc.setQueryData('submissionType', 'edit');\n                                qc.setQueryData('selectedPart', part);\n                                qc.setQueryData('view', 'newPart');\n                            }}><FontAwesomeIcon icon={faEdit}/></div>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {partList.length < 1 ? <p className={\"empty\"}>** No parts to display **</p> : <></>}\n        </section>\n    );\n}\n\nexport default InventoryTable;","import { useState, useEffect } from 'react';\n\nconst RestockTable = ({ parts }) => {\n    const [partList, setPartList] = useState(parts);\n\n    // Filter for parts below minimum stock\n    useEffect(() => {\n        setPartList(parts.filter(part => part.stock < part.minimum));\n    }, [parts]);\n\n    return (\n        <section>\n            <table>\n                <thead>\n                <tr className={\"tr-restock\"}>\n                    <th>Part #</th>\n                    <th>Description</th>\n                    <th className={\"text-center\"}>In Stock</th>\n                    <th />\n                </tr>\n                </thead>\n\n                <tbody>\n                {partList.map(part => (\n                    <tr className={\"table-item tr-restock\"} key={part._id} id={part._id}>\n                        <td>{part.partNumber}</td>\n                        <td>{part.description}</td>\n                        <td className={\"text-center\"}>{part.stock}</td>\n                        <td className={\"inventory-buttons\"}>\n                            <p className={\"warning\"}>\n                                desired minimum: {part.minimum}\n                            </p>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {partList.length < 1 ? <p className={\"empty\"}>** No parts to display **</p> : <></>}\n        </section>\n    );\n}\n\nexport default RestockTable;","import { useData, useToast } from '../../../react-query';\nimport { useMutation, useQueryClient } from 'react-query';\nimport API from '../../../utils/API';\n\nconst PartForm = () => {\n    const queryClient = useQueryClient();\n    const { addToast } = useToast();\n    const part = useData('selectedPart');\n    const submissionType = useData('submissionType');\n\n    // MUTATIONS\n    const createPart = useMutation(part => API.createPart(part), {\n        onSuccess: () => {\n            queryClient.invalidateQueries('parts');\n        }\n    });\n    const updatePart = useMutation(part => API.updatePart(part.id, part.data), {\n        onSuccess: () => {\n            queryClient.invalidateQueries('parts');\n        }\n    });\n    const deletePart = useMutation(id => API.deletePart(id), {\n        onSuccess: () => {\n            queryClient.invalidateQueries('parts');\n        }\n    });\n\n    // EVENT HANDLERS\n    const submit = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const partData = {\n                partNumber: formData.partNumber.toUpperCase().trim(),\n                description: formData.description.trim(),\n                stock: parseInt(formData.stock),\n                minimum: parseInt(formData.minimum)\n            }\n            if (submissionType === 'edit') {\n                await updatePart.mutate({id: part._id, data: partData});\n                queryClient.setQueryData('showPartForm', false);\n                return\n            }\n            if (submissionType === 'new') {\n                await createPart.mutate(partData);\n                queryClient.setQueryData('showPartForm', false);\n            }\n        } catch (err) { console.error(err) }\n    };\n\n    const removePart = (id) => {\n        let answer = window.confirm(\"Are you sure you want to delete?\\nThis cannot be undone.\");\n        if (answer) deletePart.mutate(id);\n        addToast(\"Part Deleted\");\n    }\n\n    return (\n        <section>\n            <form id={\"form-part\"} onSubmit={submit}>\n                <div>\n                    <label className={\"text-center\"}>\n                        Part #\n                        <input className={\"text-center\"} type={\"text\"} name={\"partNumber\"}\n                               placeholder={\"Part #\"}\n                               defaultValue={part ? part.partNumber : \"\"}\n                        />\n                    </label>\n                    <label>\n                        Description\n                        <input type={\"text\"} name={\"description\"}\n                               placeholder={\"Description\"}\n                               defaultValue={part ? part.description : \"\"}\n                        />\n                    </label>\n                    <label className={\"text-center\"}>\n                        In Stock\n                        <input className={\"text-center\"} type={\"text\"} name={\"stock\"}\n                               placeholder={\"#\"}\n                               defaultValue={part ? part.stock : \"\"}\n                        />\n                    </label>\n                </div>\n\n                <div>\n                    <label className={\"stock-notification\"}>\n                        Notify me when stock drops below:\n                        <input className={\"text-center\"} type={\"text\"} name={\"minimum\"}\n                               placeholder={\"#\"}\n                               defaultValue={part ? part.minimum : \"\"}\n                        />\n                    </label>\n                </div>\n\n                <div className={\"button-area\"}>\n                    <button className={\"btn-form\"} type={\"submit\"}>\n                        Save\n                    </button>\n\n                    <button\n                        className={\"btn-form\"}\n                        onClick={() => {\n                            queryClient.removeQueries('selectedPart');\n                            queryClient.setQueryData('view', 'inventory');\n                        }}\n                    >Cancel\n                    </button>\n\n                    {part && part._id ? (<button className={\"btn-form delete\"} onClick={() => {\n                        removePart(part._id);\n                        queryClient.removeQueries('selectedCustomer');\n                        queryClient.removeQueries('selectedJob');\n                        queryClient.setQueryData('view', 'inventory');\n                    }}>\n                        Delete\n                    </button>) : <></>}\n                </div>\n            </form>\n        </section>\n    )\n}\n\nexport default PartForm;","import { Redirect } from \"react-router-dom\";\nimport { useData, useUser, useParts } from '../../react-query';\nimport { Header, InventoryTable, RestockTable, PartForm } from './sections';\nimport './style.scss';\n\nconst InventoryPage = () => {\n    const { user } = useUser();\n    const { status, data: parts, error } = useParts();\n    const view = useData('view');\n\n    // REDIRECTS\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(status) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {error.message}</h4>;\n        default:\n            if (view === 'restock') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <RestockTable parts={parts.data} />\n                    </main>\n                )\n            } else if (view === 'newPart') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <PartForm />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <InventoryTable parts={parts.data} />\n                    </main>\n                )\n            }\n    }\n}\n\nexport default InventoryPage;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Customers, Dashboard, Inventory, Login, Register, Service } from \"../pages\";\nimport { SideNavbar, Toast } from '../components';\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path='/' component={Login}/>\n                <Route exact path='/login' component={Login}/>\n                <>\n                    <SideNavbar />\n                    <Route exact path='/register' component={Register}/>\n                    <Route exact path='/dashboard' component={Dashboard}/>\n                    <Route exact path='/customers' component={Customers}/>\n                    <Route exact path='/service' component={Service}/>\n                    <Route exact path='/inventory' component={Inventory}/>\n                </>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default Routes;\n","import { ReactQueryDevtools } from 'react-query/devtools';\nimport { QueryClientProvider } from 'react-query';\nimport { queryClient } from '../react-query';\nimport Routes from \"./routes\";\nimport './style/main.scss';\nimport { Toast } from '../components';\n\nconst App = () => {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <Routes />\n            <Toast />\n            <ReactQueryDevtools/>\n        </QueryClientProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}