{"version":3,"sources":["utils/API/index.js","utils/storage.js","react-query/hooks/useCustomers.jsx","react-query/hooks/useJobs.jsx","react-query/hooks/useParts.jsx","react-query/hooks/useUser.jsx","react-query/hooks/useAuth.jsx","react-query/hooks/useMessages.jsx","react-query/hooks/useRequests.jsx","react-query/queryClient.jsx","react-query/hooks/useData.jsx","react-query/hooks/useToast.jsx","components/SideNavbar/index.jsx","components/Searchbar/index.jsx","components/AutoComplete/index.jsx","components/Toast/index.jsx","pages/Login/index.jsx","pages/Register/index.jsx","pages/Dashboard/sections/Header.jsx","pages/Dashboard/sections/Messages.jsx","pages/Dashboard/sections/Calendar.jsx","pages/Dashboard/sections/Notifications.jsx","pages/Dashboard/sections/Revenue.jsx","pages/Service/sections/Header.jsx","utils/sort.js","pages/Service/sections/ServiceTable.jsx","pages/Service/sections/RequestTable.jsx","pages/Service/sections/UnpaidTable.jsx","pages/Service/sections/ServiceForm.jsx","pages/Dashboard/index.jsx","pages/Service/index.jsx","pages/Customers/sections/Header.jsx","pages/Customers/sections/Customers.jsx","pages/Customers/sections/CustomerForm.jsx","pages/Customers/sections/CustomerHistory.jsx","pages/Customers/index.jsx","pages/Inventory/sections/Header.jsx","pages/Inventory/sections/Inventory.jsx","pages/Inventory/sections/Restock.jsx","pages/Inventory/sections/PartForm.jsx","pages/Inventory/index.jsx","app/routes.jsx","app/App.jsx","index.js"],"names":["baseUrl","getStoredToken","JSON","parse","localStorage","getItem","clearStoredToken","removeItem","customerUrl","jobUrl","partUrl","messageUrl","requestUrl","userUrl","authUrl","authHeader","token","API","getCustomers","axios","get","headers","createCustomer","data","post","updateCustomer","id","put","deleteCustomer","delete","getJobs","createJob","updateJob","deleteJob","deleteJobsByCustomerId","getParts","createPart","updatePart","deletePart","getMessages","updateMessage","deleteMessage","getRequests","deleteRequest","getUser","updateUser","deleteUser","login","register","fetchCustomers","a","console","error","message","window","location","reload","useCustomers","useQuery","fetchJobs","useJobs","fetchParts","useParts","fetchUser","useUser","qc","useQueryClient","useState","user","setUser","_id","enabled","onSuccess","res","username","newUser","setQueryData","clearUser","removeQueries","useAuth","password","response","setItem","stringify","logout","fetchMessages","useMessages","fetchRequests","useRequests","queryClient","QueryClient","defaultOptions","queries","staleTime","cacheTime","refetchOnMount","refetchOnWindowFocus","refetchOnReconnect","useData","queryKey","undefined","useToasts","toasts","useEffect","length","slice","interval","setInterval","clearInterval","addToast","newToast","Math","floor","random","msg","deleteToast","filter","toast","SideNavbar","history","useHistory","page","setPage","view","path","pathname","links","document","querySelectorAll","classList","remove","add","className","onClick","push","icon","faHome","faUserFriends","faTools","faWarehouse","faSignOutAlt","Searchbar","placeholder","setSearch","faSearch","name","onChange","e","preventDefault","currentTarget","value","type","AutoComplete","suggestionsListComponent","activeSuggestion","setActiveSuggestion","filteredSuggestions","setFilteredSuggestions","showSuggestions","setShowSuggestions","userInput","setUserInput","customer","target","dataset","businessName","map","suggestion","index","address","street1","city","suggestions","filtered","toLowerCase","indexOf","required","Toast","useToast","toastList","setToastList","Login","to","submitHandler","formData","Object","fromEntries","FormData","onSubmit","faUser","faLock","Register","status","Header","Messages","messages","msgList","setMsgList","read","setRead","editMessage","useMutation","invalidateQueries","toggleReadUnread","toggleBtns","getElementsByClassName","innerHTML","email","dayjs","createdAt","format","boolean","mutate","markRead","Calendar","jobs","jobList","setJobList","days","setDays","today","Date","job","i","number","day","serviceDate","subtract","sort","job1","job2","charCodeAt","selectJob","Notifications","requests","parts","Revenue","revenue","setRevenue","outstanding","setOutstanding","year","dollarUSLocale","Intl","NumberFormat","totalRevenue","unpaid","isPaid","totalBill","formFields","sortPendingToTop","unshift","splice","ServiceTable","statusFilter","setStatusFilter","searchTerm","setSearchTerm","sortedJobs","includes","invoiceNumber","faChevronDown","RequestTable","requestList","setRequestList","request","contactName","phone","issueNotes","state","UnpaidTable","editJob","markPaid","ServiceForm","existingCustomer","deleteReq","submissionType","found","editCustomer","removeRequest","submit","jobData","trim","serviceNotes","parseFloat","customerData","street2","zipcode","mutateAsync","newCustomer","defaultValue","faHashtag","faDollarSign","defaultChecked","confirm","DashboardPage","msgStatus","msgError","reqStatus","reqError","jobStatus","jobError","partStatus","partError","part","stock","minimum","ServicePage","CustomersTable","customers","customerList","setCustomerList","CustomerForm","deleteJobs","removeCustomer","submitForm","notes","CustomerHistory","customerId","CustomerPage","customerStatus","customerError","Customers","refetchQueries","InventoryTable","partList","setPartList","partNumber","description","update","changeQuantity","faEdit","RestockTable","PartForm","partData","toUpperCase","parseInt","InventoryPage","isFetching","Restock","Inventory","Routes","exact","component","Dashboard","Service","App","client","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70633e51.chunk.js","sourcesContent":["import axios from 'axios';\nimport { getStoredToken } from '../storage'\n\nlet baseUrl;\n\nif (process.env.NODE_ENV === \"production\") {\n  baseUrl = \"https://metronics-webapp-server.herokuapp.com/api\"\n} else {\n  baseUrl = \"http://localhost:8000/api\"\n}\n\nconst customerUrl = `${baseUrl}/customers`;\nconst jobUrl = `${baseUrl}/jobs`;\nconst partUrl = `${baseUrl}/parts`;\nconst messageUrl = `${baseUrl}/messages`;\nconst requestUrl = `${baseUrl}/requests`;\nconst userUrl = `${baseUrl}/users`;\nconst authUrl = `${baseUrl}/auth`;\n\nconst authHeader = () => {\n  const token = getStoredToken().token;\n  if (token) {\n    return { 'metronics': token };\n  }\n}\n\nconst API = {\n\n  // CUSTOMERS\n  getCustomers() {\n    return axios.get(customerUrl, { headers: authHeader() });\n  },\n  createCustomer(data) {\n    return axios.post(customerUrl, data, { headers: authHeader() });\n  },\n  updateCustomer(id, data) {\n    return axios.put(`${customerUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteCustomer(id) {\n    return axios.delete(`${customerUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // JOBS\n  getJobs() {\n    return axios.get(jobUrl, { headers: authHeader() });\n  },\n  createJob(data) {\n    return axios.post(jobUrl, data, { headers: authHeader() });\n  },\n  updateJob(id, data) {\n    return axios.put(`${jobUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteJob(id) {\n    return axios.delete(`${jobUrl}/${id}`, { headers: authHeader() });\n  },\n  deleteJobsByCustomerId(id) {\n    return axios.delete(`${jobUrl}/clear/${id}`, { headers: authHeader() });\n  },\n\n  // PARTS\n  getParts() {\n    return axios.get(partUrl, { headers: authHeader() });\n  },\n  createPart(data) {\n    return axios.post(partUrl, data, { headers: authHeader() });\n  },\n  updatePart(id, data) {\n    return axios.put(`${partUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deletePart(id) {\n    return axios.delete(`${partUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // MESSAGES\n  getMessages() {\n    return axios.get(messageUrl, { headers: authHeader() });\n  },\n  updateMessage(id, data) {\n    return axios.put(`${messageUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteMessage(id) {\n    return axios.delete(`${messageUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // REQUESTS\n  getRequests() {\n    return axios.get(requestUrl, { headers: authHeader() });\n  },\n  deleteRequest(id) {\n    return axios.delete(`${requestUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // USERS\n  getUser(id) {\n    return axios.get(`${userUrl}/${id}`, { headers: authHeader() });\n  },\n  updateUser(id, data) {\n    return axios.put(`${userUrl}/${id}`, data, { headers: authHeader() });\n  },\n  deleteUser(id) {\n    return axios.delete(`${userUrl}/${id}`, { headers: authHeader() });\n  },\n\n  // AUTHENTICATION\n  login(data) {\n    return axios.post(`${authUrl}/login`, data);\n  },\n  register(data) {\n    return axios.post(`${authUrl}/register`, data, { headers: authHeader() });\n  }\n}\n\nexport default API;","const getStoredToken = () => {\n    return JSON.parse(localStorage.getItem('metronics'))\n}\n\nconst setStoredToken = token => {\n    localStorage.setItem('metronics', JSON.stringify(token));\n}\n\nconst clearStoredToken = () => {\n    localStorage.removeItem('metronics');\n}\n\nexport { getStoredToken, setStoredToken, clearStoredToken };","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchCustomers = async () => {\n    try {\n        return await API.getCustomers();\n    } catch(err) {\n        console.error(err.message)\n        window.location.reload();\n    }\n}\n\nconst useCustomers = () => {\n    return useQuery('customers', () => fetchCustomers());\n}\n\nexport default useCustomers;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\nimport { useState } from 'react';\n\nconst fetchJobs = async () => {\n    try {\n        return await API.getJobs();\n    } catch(err) {\n        console.error(err.message);\n        window.location.reload();\n    }\n}\n\nconst useJobs = () => {\n    return useQuery('jobs', () => fetchJobs());\n}\n\nexport default useJobs;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchParts = async () => {\n    try {\n        return await API.getParts();\n    } catch(err) {\n        console.error(err.message)\n        window.location.reload();\n    }\n}\n\nconst useParts = () => {\n    return useQuery('parts', () => fetchParts());\n}\n\nexport default useParts;","import { useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { getStoredToken, clearStoredToken } from '../../utils/storage';\nimport API from \"../../utils/API\";\n\nconst fetchUser = async (id) => {\n    try {\n        return await API.getUser(id);\n    } catch(err) {\n        clearStoredToken();\n        console.error(err.message)\n    }\n}\n\nconst useUser = () => {\n    const qc = useQueryClient();\n    const [user, setUser] = useState(getStoredToken());\n\n    useQuery('user', () => fetchUser(user._id), {\n        enabled: !!user,\n        onSuccess: res => {\n            setUser({\n                _id: res.data._id,\n                username: res.data.username\n            })\n        }\n    })\n\n    const updateUser = newUser => {\n        setUser({\n            _id: newUser._id,\n            username: newUser.username\n        });\n        qc.setQueryData('user', user);\n    }\n\n    const clearUser = () => {\n        setUser(null);\n        qc.setQueryData('user', null);\n        qc.removeQueries(['user', 'jobs', 'customers', 'parts']);\n    }\n\n    return { user, updateUser, clearUser }\n}\n\nexport default useUser;","import useUser from \"./useUser\";\nimport API from '../../utils/API';\nimport {clearStoredToken, setStoredToken} from \"../../utils/storage\";\n\nconst useAuth = () => {\n    const { updateUser, clearUser } = useUser();\n\n    const login = async (username, password) => {\n        try {\n            const response = await API.login(username, password);\n            if (response.data) {\n                setStoredToken({ _id: response.data._id, token: response.data.token });\n            }\n        } catch(err) { console.error(err.message) }\n    }\n\n    const register = async ({ username, password }) => {\n        const newUser = {\n            username: username,\n            password: password\n        }\n        try {\n            const response = await API.register(newUser);\n            // if (response.data) {\n            //     updateUser(response.data);\n            // }\n            return response;\n        } catch(err) { console.error(err.message) }\n    }\n\n    const logout = () => {\n        clearStoredToken();\n        clearUser();\n    }\n\n    return { login, register, logout }\n}\n\nexport default useAuth;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchMessages = async () => {\n    try {\n        return await API.getMessages();\n    } catch(err) {\n        console.error(err.message);\n        window.location.reload();\n    }\n}\n\nconst useMessages = () => {\n    return useQuery('messages', () => fetchMessages());\n}\n\nexport default useMessages;","import { useQuery } from 'react-query';\nimport API from '../../utils/API';\n\nconst fetchRequests = async () => {\n    try {\n        return await API.getRequests();\n    } catch(err) {\n        console.error(err.message);\n        window.location.reload();\n    }\n}\n\nconst useRequests = () => {\n    return useQuery('requests', () => fetchRequests());\n}\n\nexport default useRequests;","import { QueryClient } from 'react-query';\n\nconst defaultQueryClientOptions = {\n    queries: {\n        staleTime: 600000,\n        cacheTime: 900000,\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n        refetchOnReconnect: false,\n    },\n}\n\nconst queryClient = new QueryClient({\n    defaultOptions: defaultQueryClientOptions,\n});\n\nexport default queryClient;\n","import { useQuery } from 'react-query';\n\nconst useData = (queryKey) => {\n    const { data } = useQuery(queryKey, () => {});\n    if (data === undefined || null) {\n        return null;\n    } else {\n        return data;\n    }\n}\n\nexport default useData;","import { useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport useData from './useData';\n\nconst useToasts = () => {\n    const qc = useQueryClient();\n    const toasts = useData('toasts');\n\n    useEffect(() => {\n        if (toasts) {\n            if (toasts.length > 5) {\n                qc.setQueryData('toasts', toasts.slice(1));\n            }\n\n            const interval = setInterval(() => {\n                qc.setQueryData('toasts', toasts.slice(1));\n            }, 3000);\n            return () => clearInterval(interval);\n        }\n    }, [toasts]);\n\n    const addToast = message => {\n        const newToast = { id: (Math.floor(Math.random() * 1000)), msg: message }\n        if (toasts) {\n            qc.setQueryData('toasts', [...toasts, newToast]);\n        } else {\n            qc.setQueryData('toasts', [newToast]);\n        }\n\n    }\n\n    const deleteToast = id => {\n        qc.setQueryData('toasts', toasts.filter(toast => toast.id !== id));\n    }\n\n    return { toasts, addToast, deleteToast }\n}\n\nexport default useToasts;","import { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport { useAuth, useData } from '../../react-query';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome, faUserFriends, faTools, faWarehouse, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\nimport './style.scss';\n\nconst SideNavbar = () => {\n    const qc = useQueryClient()\n    const { logout } = useAuth();\n    const history = useHistory();\n    const [page, setPage] = useState(\"\");\n    const view = useData('view');\n\n    useEffect(() => {\n        const path = window.location.pathname;\n        setPage(path)\n    }, [view]);\n\n    useEffect(() => {\n        const links = document.querySelectorAll('svg')\n        for (let link of links) {\n            link.classList.remove('active');\n        }\n\n        switch (page) {\n            case '/dashboard':\n                links[0].classList.add('active');\n                break;\n            case '/customers':\n                links[1].classList.add('active');\n                break;\n            case '/service':\n                links[2].classList.add('active');\n                break;\n            case '/inventory':\n                links[3].classList.add('active');\n                break;\n        }\n    }, [page]);\n\n    // EVENT LISTENERS\n    const signOut = () => {\n        logout();\n        history.push('/');\n        window.location.reload();\n    }\n\n    return (\n        <header>\n            <nav className={\"navbar\"}>\n                <ul>\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/dashboard');\n                        history.push('/dashboard');\n                    }}>\n                        <FontAwesomeIcon icon={faHome}/>\n                    </li>\n\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/customers');\n                        history.push('/customers');\n                    }}>\n                        <FontAwesomeIcon icon={faUserFriends}/>\n                    </li>\n\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/service');\n                        history.push('/service');\n                    }}>\n                        <FontAwesomeIcon icon={faTools}/>\n                    </li>\n\n                    <li className={\"nav-item\"} onClick={() => {\n                        qc.setQueryData('view', 'default');\n                        setPage('/inventory');\n                        history.push('/inventory');\n                    }}>\n                        <FontAwesomeIcon icon={faWarehouse}/>\n                    </li>\n                </ul>\n\n                <button className={\"signOut\"} onClick={signOut}>\n                    <FontAwesomeIcon icon={faSignOutAlt}/>\n                </button>\n            </nav>\n        </header>\n    )\n}\n\nexport default SideNavbar;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport './style.scss';\n\nconst Searchbar = ({ placeholder, setSearch }) => {\n\n  const searchJobs = e => {\n    e.preventDefault();\n    setSearch(e.currentTarget.value);\n  }\n\n    return (\n        <div className={\"searchbar\"}>\n            <FontAwesomeIcon className={\"faSearch\"} icon={faSearch} />\n            <input\n                className={\"search\"}\n                name={\"search\"}\n                onChange={searchJobs}\n                type={\"text\"}\n                placeholder={placeholder}\n            />\n        </div>\n    )\n}\n\nexport default Searchbar;","import { useState } from \"react\";\nimport { useQueryClient } from 'react-query';\nimport { useCustomers } from \"../../react-query\";\nimport './style.scss';\n\nconst AutoComplete = () => {\n  const queryClient = useQueryClient();\n  const { data } = useCustomers()\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const onChange = e => {\n    const suggestions = data.data;\n    const userInput = e.target.value;\n    const filtered = suggestions.filter(suggestion => suggestion.businessName.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    setActiveSuggestion(0);\n    setFilteredSuggestions(filtered);\n    setShowSuggestions(true);\n    setUserInput(e.target.value);\n  }\n\n  const onClick = e => {\n    let customer = data.data.filter(customer => customer._id === e.target.dataset.id);\n    queryClient.setQueryData('submissionType', 'add');\n    queryClient.setQueryData('selectedCustomer', customer[0]);\n    setUserInput(customer[0].businessName);\n    setActiveSuggestion(0);\n    setFilteredSuggestions([]);\n    setShowSuggestions(false);\n  }\n\n  /* const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      let customer = filteredSuggestions[activeSuggestion];\n      queryClient.setQueryData('submissionType', 'add');\n      queryClient.setQueryData('selectedCustomer', filteredSuggestions[activeSuggestion]);\n      setUserInput(customer.businessName);\n      setActiveSuggestion(0);\n      setShowSuggestions(false);\n    } else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n      setActiveSuggestion(activeSuggestion - 1);\n    } else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n      setActiveSuggestion(activeSuggestion + 1);\n    }\n  } */\n\n  let suggestionsListComponent;\n\n  if (showSuggestions && userInput) {\n    if (filteredSuggestions.length) {\n      suggestionsListComponent = (\n        <ul className=\"suggestions\">\n          {filteredSuggestions.map((suggestion, index) => {\n            let className;\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n            return (\n              <li className={className} key={suggestion._id} data-id={suggestion._id} onClick={onClick}>\n                {suggestion.businessName} - {suggestion.address.street1}, {suggestion.address.city}\n              </li>\n            );\n          })}\n        </ul>\n      );\n    }\n  }\n\n  return (\n      <>\n        <input\n            type=\"text\"\n            placeholder=\"Business Name\"\n            name={\"businessName\"}\n            onChange={onChange}\n            // onKeyDown={onKeyDown}\n            value={userInput}\n            required\n        />\n        {filteredSuggestions.length ? suggestionsListComponent : \"\"}\n      </>\n  );\n}\n\nexport default AutoComplete;\n\n// BUG: if AutoComplete suggestion selected using a click event && then user hits the 'enter' key to submit form... crash and burn.","import { useEffect, useState } from 'react';\nimport { useToast } from '../../react-query';\nimport './style.scss';\n\nconst Toast = () => {\n    const { toasts, deleteToast } = useToast();\n    const [toastList, setToastList] = useState([]);\n\n    useEffect(() => {\n        if (toasts) {\n            setToastList(toasts)\n        }\n    }, [toasts]);\n\n    return (\n        <footer className={\"toast-container\"}>\n            {toastList.map(toast => (\n                <div className={\"toast-card\"} key={toast.id}>\n                    <button onClick={() => deleteToast(toast.id)}>\n                        X\n                    </button>\n                    <p className={\"toast-message\"}>{toast.msg}</p>\n                </div>\n            ))}\n        </footer>\n    )\n}\n\nexport default Toast;","import { useHistory, Redirect } from 'react-router-dom';\nimport { useAuth, useUser } from \"../../react-query\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons';\nimport './style.scss';\n\nconst Login = () => {\n    const { user } = useUser();\n    const { login } = useAuth();\n    const history = useHistory();\n\n    if (user) {\n        return <Redirect to={'/dashboard'} />;\n    }\n\n    const submitHandler = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const user = {\n                username: formData.username,\n                password: formData.password\n            }\n            await login(user);\n            history.push('/dashboard');\n        } catch(err) { console.error(err) }\n    }\n\n    return (\n        <main>\n            <div id={\"card-login\"}>\n                <h1>Metronics</h1>\n                <form id={\"form-login\"} onSubmit={submitHandler}>\n                    <FontAwesomeIcon className={\"icon-faUser\"} icon={faUser}/>\n                    <label>\n                        Username\n                        <input\n                            type={\"text\"}\n                            name={\"username\"}\n                            required\n                        />\n                    </label>\n\n                    <FontAwesomeIcon className={\"icon-faLock\"} icon={faLock}/>\n                    <label>\n                        Password\n                        <input\n                            type={\"password\"}\n                            name={\"password\"}\n                            required\n                        />\n                    </label>\n\n                    <button\n                        className={\"btn-login\"}\n                        type={\"submit\"}\n                    >LOGIN\n                    </button>\n                </form>\n            </div>\n        </main>\n    )\n}\n\nexport default Login;","import { Redirect, useHistory } from 'react-router-dom';\nimport { useAuth } from \"../../react-query\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons';\n\nconst Register = () => {\n    const { register } = useAuth();\n    const history = useHistory();\n\n    const submitHandler = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const newUser = await register({\n                username: formData.username,\n                password: formData.password\n            });\n            if (newUser.status === 201) history.push('/dashboard');\n        } catch(err) { console.error(err) }\n    }\n\n    return (\n        <main>\n            <div id={\"card-login\"}>\n                <h1>Metronics</h1>\n                <form id={\"form-login\"} onSubmit={submitHandler}>\n                    <FontAwesomeIcon className={\"icon-faUser\"} icon={faUser}/>\n                    <label>\n                        Username\n                        <input\n                            type={\"text\"}\n                            name={\"username\"}\n                            required\n                        />\n                    </label>\n\n                    <FontAwesomeIcon className={\"icon-faLock\"} icon={faLock}/>\n                    <label>\n                        Password\n                        <input\n                            type={\"password\"}\n                            name={\"password\"}\n                            required\n                        />\n                    </label>\n\n                    <button\n                        className={\"btn-login\"}\n                        type={\"submit\"}\n                    >REGISTER\n                    </button>\n                </form>\n            </div>\n        </main>\n    )\n}\n\nexport default Register;","import { useQueryClient } from 'react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n\n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => {\n                qc.setQueryData('view', 'default');\n            }}>Dashboard</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'overview')\n                }}>Overview</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'messages')\n                }}>View Messages</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","import { useEffect, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport API from '../../../utils/API';\nimport dayjs from 'dayjs';\n\nconst Messages = ({ messages }) => {\n    const qc = useQueryClient();\n    const [msgList, setMsgList] = useState(messages);\n    const [read, setRead] = useState(false);\n\n    useEffect(() => {\n            if (read === false) {\n                setMsgList(messages.filter(msg => msg.read === false));\n            } else {\n                setMsgList(messages.filter(msg => msg.read === true));\n            }\n    }, [read, messages]);\n\n    // DATA MUTATIONS\n    const editMessage = useMutation(msg => API.updateMessage(msg.id, msg.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('messages');\n        }\n    });\n\n    // EVENT LISTENERS\n    const markRead = msg => {\n        let boolean = msg.read === false;\n        editMessage.mutate({ id: msg._id, data: {...msg, read: boolean} });\n    }\n\n    const toggleReadUnread = async e => {\n        e.preventDefault();\n        const toggleBtns = document.getElementsByClassName('toggle-btn');\n        for (let btn of toggleBtns) {\n            btn.classList.remove('active');\n        }\n        e.currentTarget.classList.add('active');\n        e.currentTarget.innerHTML === 'Read' ? setRead(true) : setRead(false);\n    }\n\n    return (\n        <section className={\"section-messages\"}>\n            <div className={\"read-toggle\"}>\n                <div className={\"toggle-btn left active\"} onClick={e => toggleReadUnread(e)}>\n                    Unread\n                </div>\n                <div className={\"toggle-btn right\"} onClick={e => toggleReadUnread(e)}>\n                    Read\n                </div>\n            </div>\n\n            {msgList.map(msg => (\n                <div className={\"message\"} key={msg._id}>\n                    <div className={\"msg-header\"}>\n                        <p>From: <strong>{msg.name}</strong></p>\n                        <p>{msg.email}</p>\n                        <p>{dayjs(msg.createdAt).format(\"MMM D, YYYY\")}</p>\n                    </div>\n                    <p>{msg.message}</p>\n                    <p className={\"mark-read text-right\"} onClick={() => markRead(msg)}>\n                        {msg.read === false ? \"Mark as read\" : \"Mark as unread\"}\n                    </p>\n                </div>\n            ))}\n            {msgList.length < 1 ? <p className={\"empty\"}>** No messages to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default Messages;","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport dayjs from 'dayjs';\n\nconst Calendar = ({ jobs }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n    const [days, setDays] = useState([]);\n    const today = dayjs(new Date());\n\n    useEffect(() => {\n        setJobList(jobs.filter(job => job.status !== 'Canceled'));\n        setDays(() => {\n            const days = [];\n            for (let i = 0; i < 5; i++) {\n                days.push({\n                    name: dayjs(today).add(i, 'day').format('dddd'),\n                    number: dayjs(today).add(i, 'day').format('DD')\n                })\n            }\n            return days;\n        })\n    }, [jobs])\n\n    // EVENT LISTENERS\n    const selectJob = (job) => {\n        qc.setQueryData('submissionType', 'edit');\n        qc.setQueryData('selectedJob', job);\n        qc.setQueryData('selectedCustomer', job.customer);\n        qc.setQueryData('view', 'serviceForm');\n    }\n\n    return (\n        <section className={\"section-calendar\"}>\n            <h2>5 DAY SCHEDULE</h2>\n            <div className={\"upcoming\"}>\n                {days.map(day => (\n                    <div className={\"card-day\"} key={day.number}>\n                        <h3>\n                            <span>{day.name}</span>\n                            <span>{day.number}</span>\n                        </h3>\n                            <div>\n                                {jobList.filter(job => (\n                                    dayjs(job.serviceDate).format('dddd') === day.name &&\n                                    dayjs(job.serviceDate) > today.subtract(1, 'day') &&\n                                    dayjs(job.serviceDate) < today.add(5, 'day')\n                                )).sort((job1, job2) => (\n                                    job1.customer.address.city.charCodeAt(0) - job2.customer.address.city.charCodeAt(0)\n                                )).map(job => (\n                                    <p key={job._id} onClick={() => selectJob(job)}>\n                                        {job.customer.businessName}<br/>\n                                        <span>{job.customer.address.city}</span>\n                                    </p>\n                                ))}\n                            </div>\n                    </div>\n                ))}\n            </div>\n        </section>\n    )\n}\n\nexport default Calendar;","import { useHistory } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\n\nconst Notifications = ({ jobs, requests, messages, parts }) => {\n    const qc = useQueryClient();\n    const history = useHistory();\n\n    return (\n        <section className={\"section-notifications\"}>\n            <h2>NOTIFICATIONS</h2>\n            <div>\n                {jobs.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'all');\n                    history.push('/service');\n                }}>\n                    There are new jobs that need to be scheduled.\n                </p> : <></>}\n\n                {requests.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'requests');\n                    history.push('/service');\n                }}>\n                    There are new online requests awaiting your review.\n                </p> : <></>}\n\n                {messages.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'messages');\n                }}>\n                    You have unread messages in your inbox.\n                </p> : <></>}\n\n                {parts.length ? <p className={\"notice\"} onClick={() => {\n                    qc.setQueryData('view', 'restock');\n                    history.push('/inventory');\n                }}>\n                    Some parts need to be re-ordered.\n                </p> : <></>}\n\n                {!parts.length && !jobs.length && !requests.length && !messages.length ?\n                    <p className={\"empty-notifications\"}>\n                        ** You're all caught up. **\n                    </p> : <></>}\n            </div>\n        </section>\n    )\n}\n\nexport default Notifications;","import { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport dayjs from 'dayjs';\n\nconst Revenue = ({ jobs }) => {\n    const qc = useQueryClient();\n    const history = useHistory();\n    const [revenue, setRevenue] = useState(0);\n    const [outstanding, setOutstanding] = useState(0);\n    const year = dayjs(new Date()).format('YYYY');\n    const dollarUSLocale = Intl.NumberFormat('en-US');\n\n    useEffect(() => {\n        let totalRevenue = 0;\n        let unpaid = 0;\n        for (let job of jobs) {\n            if (dayjs(job.serviceDate).format('YYYY') === year && job.isPaid) {\n                totalRevenue += job.totalBill;\n            }\n            if (dayjs(job.serviceDate).format('YYYY') <= year  && !job.isPaid) {\n                unpaid += job.totalBill;\n            }\n        }\n        setRevenue(dollarUSLocale.format(totalRevenue));\n        setOutstanding(dollarUSLocale.format(unpaid));\n    }, [jobs])\n\n    return (\n        <section className={\"section-revenue\"}>\n            <h2>YTD SERVICE REVENUE</h2>\n            <p className={\"revenue\"}>\n                ${revenue}\n            </p>\n            <p className={\"outstanding\"} onClick={() => {\n                qc.setQueryData('view', 'unpaid');\n                history.push('/service');\n            }}>\n                ${outstanding} outstanding\n            </p>\n        </section>\n    )\n}\n\nexport default Revenue;","import { useQueryClient } from 'react-query';\nimport { useData } from '../../../react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n    const view = useData('view');\n    \n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => window.location.reload()}>Service Jobs</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'default');\n                }}>View All</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'requests');\n                }}>View Online Requests</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'unpaid');\n                }}>View Unpaid</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('selectedCustomer', null);\n                    qc.setQueryData('selectedJob', null);\n                    qc.setQueryData('submissionType', 'new');\n                    if (view === 'serviceForm') {\n                        const formFields = document.querySelectorAll('input, textarea');\n                        for (let field of formFields) field.value = \"\";\n                    } else {\n                        qc.setQueryData('view', 'serviceForm');\n                    }\n                }}>Create New</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import dayjs from 'dayjs';\n\nconst sortByServiceDate = jobs => {\n    for (let i = 0; i < jobs.length; i++) {\n        if (dayjs(jobs[i].serviceDate).unix() > dayjs(jobs[0].serviceDate).unix() ||\n            jobs[i].serviceDate === \"\") {\n            jobs.unshift(jobs.splice(i,1)[0]);\n        } else {\n            for (let j = 1; j < i; j++) {\n                if (dayjs(jobs[i].serviceDate).unix() < dayjs(jobs[j-1].serviceDate).unix() &&\n                    dayjs(jobs[i].serviceDate).unix() > dayjs(jobs[0].serviceDate).unix()) {\n                    jobs.splice(j,0,jobs.splice(i,1)[0]);\n                }\n            }\n        }\n    }\n    return jobs;\n}\n\nconst sortPendingToTop = jobs => {\n    for (let i = 0; i < jobs.length; i++) {\n        if (jobs[i].status === \"Pending\") {\n            jobs.unshift(jobs.splice(i,1)[0]);\n        }\n    }\n    return jobs;\n}\n\n\nexport { sortPendingToTop, sortByServiceDate };","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport { sortPendingToTop } from '../../../utils/sort';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport dayjs from 'dayjs';\n\nconst ServiceTable = ({ jobs }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n    const [statusFilter, setStatusFilter] = useState(\"\");\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Filter by status\n    useEffect(() => {\n        const sortedJobs = sortPendingToTop(jobs);\n        if (statusFilter === \"Pending\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Pending\"));\n        } else if (statusFilter === \"Scheduled\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Scheduled\"));\n        } else if (statusFilter === \"Completed\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Completed\"));\n        } else if (statusFilter === \"Canceled\") {\n            setJobList(sortedJobs.filter(job => job.status === \"Canceled\"));\n        } else {\n            setJobList(sortedJobs);\n        }\n    }, [statusFilter, jobs]);\n\n    // Filter by search term\n    useEffect(() => {\n        const sortedJobs = sortPendingToTop(jobs);\n        if (searchTerm !== \"\") {\n            setJobList(\n                sortedJobs.filter(job => {\n                    return job.customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        (job.customer.address.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                        (job.serviceDate !== null && job.serviceDate.includes(searchTerm)) ||\n                        (job.invoiceNumber !== null && job.invoiceNumber.includes(searchTerm));\n                })\n            );\n        } else {\n            setJobList(sortedJobs);\n        }\n    }, [searchTerm, jobs]);\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n\n                <div className={\"dropdown\"}>\n                    <FontAwesomeIcon className={\"faChevronDown\"} icon={faChevronDown}/>\n                    <select onChange={e => setStatusFilter(e.target.value)}>\n                        <option>Filter by status</option>\n                        <option>Pending</option>\n                        <option>Scheduled</option>\n                        <option>Completed</option>\n                        <option>Canceled</option>\n                    </select>\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-job\"}>\n                    <th className={\"text-center\"}>Service Date</th>\n                    <th>Business Name</th>\n                    <th>City</th>\n                    <th className={\"text-center\"}>Invoice #</th>\n                    <th className={\"text-center\"}>Status</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {jobList.map(job => (\n                    <tr className={\"table-item tr-job clickable\"} key={job._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'edit');\n                        qc.setQueryData('selectedJob', job);\n                        qc.setQueryData('selectedCustomer', job.customer);\n                        qc.setQueryData('view', 'serviceForm');\n                    }}>\n                        <td className={\"text-center\"}>{job.serviceDate ? dayjs(job.serviceDate).format(\"MMM D, YYYY\") : \"--\"}</td>\n                        <td>{job.customer.businessName}</td>\n                        <td>{job.customer.address.city}</td>\n                        <td className={\"text-center\"}>{job.invoiceNumber ? job.invoiceNumber : \"--\"}</td>\n                        <td className={\"text-center\"}>{job.status}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {jobList.length < 1 ? <p className={\"empty\"}>** No jobs to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default ServiceTable;\n","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport dayjs from 'dayjs';\n\nconst RequestTable = ({ requests }) => {\n    const qc = useQueryClient();\n    const [requestList, setRequestList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Filter by search term\n    useEffect(() => {\n        setRequestList(\n            requests.filter(request => {\n                return request.customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                    (request.customer.address.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                    (request.customer.contactName.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                    (request.customer.phone.includes(searchTerm));\n            })\n        );\n    }, [searchTerm, requests]);\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-job\"}>\n                    <th className={\"text-center\"}>Date Submitted</th>\n                    <th>Business Name</th>\n                    <th>City</th>\n                    <th className={\"text-center\"}>Contact Name</th>\n                    <th className={\"text-center\"}>Phone #</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {requestList.map(request => (\n                    <tr className={\"table-item tr-job clickable\"} key={request._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'new');\n                        qc.setQueryData('selectedJob', {\n                            _id: request._id,\n                            status: \"Pending\",\n                            issueNotes: request.issueNotes\n                        });\n                        qc.setQueryData('selectedCustomer', request.customer);\n                        qc.setQueryData('view', 'serviceForm');\n                        qc.setQueryData('deleteRequest', true);\n                    }}>\n                        <td className={\"text-center\"}>{dayjs(request.createdAt).format(\"MMM D, YYYY\")}</td>\n                        <td>{request.customer.businessName}</td>\n                        <td>{request.customer.address.city}, {request.customer.address.state}</td>\n                        <td className={\"text-center\"}>{request.customer.contactName}</td>\n                        <td className={\"text-center\"}>{request.customer.phone}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {requestList.length < 1 ? <p className={\"empty\"}>** No online requests to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default RequestTable;","import { useEffect, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport API from '../../../utils/API';\nimport dayjs from 'dayjs';\n\nconst UnpaidTable = ({ jobs }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const dollarUSLocale = Intl.NumberFormat('en-US');\n\n    // Filter by search term\n    useEffect(() => {\n        if (searchTerm === \"\") {\n            setJobList(jobs.filter(job => !job.isPaid && job.status === 'Completed'));\n        } else {\n            setJobList(\n                jobList.filter(job => {\n                    return job.customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        (job.customer.address.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                        (job.customer.contactName.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                        (job.customer.phone.includes(searchTerm));\n                })\n            );\n        }\n    }, [searchTerm, jobs]);\n\n    // MUTATION\n    const editJob = useMutation(job => API.updateJob(job.id, job.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n\n    const markPaid = (job) => {\n        editJob.mutate({ id: job._id, data: {...job, isPaid: true} });\n    }\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-job\"}>\n                    <th className={\"text-center\"}>Service Date</th>\n                    <th>Business Name</th>\n                    <th className={\"text-center\"}>Invoice #</th>\n                    <th className={\"text-center\"}>Total Bill</th>\n                    <th/>\n                </tr>\n                </thead>\n\n                <tbody>\n                {jobList.map(job => (\n                    <tr className={\"table-item tr-job\"} key={job._id}>\n                        <td className={\"text-center\"}>{job.serviceDate ? dayjs(job.serviceDate).format(\"MMM D, YYYY\") : \"--\"}</td>\n                        <td>{job.customer.businessName}</td>\n                        <td className={\"text-center\"}>{job.invoiceNumber ? job.invoiceNumber : \"--\"}</td>\n                        <td className={\"text-center\"}>$ {dollarUSLocale.format(job.totalBill)}</td>\n                        <td className={\"mark-paid text-center\"} onClick={() => markPaid(job)}>Mark as paid</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {jobList.length < 1 ? <p className={\"empty\"}>** No unpaid jobs to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default UnpaidTable;","import { useEffect, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useCustomers, useData, useToast } from '../../../react-query';\nimport { AutoComplete } from '../../../components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faHashtag, faDollarSign } from '@fortawesome/free-solid-svg-icons';\nimport API from '../../../utils/API';\n\nconst ServiceForm = () => {\n    const qc = useQueryClient();\n    const { status, data, error } = useCustomers();\n    const { addToast } = useToast();\n    const existingCustomer = useData('existingCustomer');\n    const deleteReq = useData('deleteRequest');\n    const submissionType = useData('submissionType');\n    const customer = useData('selectedCustomer');\n    const job = useData('selectedJob');\n    const view = useData('view');\n    const dollarUSLocale = Intl.NumberFormat('en-US');\n\n    useEffect(() => {\n        if (status === 'success' && view === 'requests') {\n            const found = data.data.filter(data => {\n                return customer.address.street1.toLowerCase() === data.address.street1.toLowerCase()\n                    && customer.address.city.toLowerCase() === data.address.city.toLowerCase();\n            })\n            if (found.length > 0) qc.setQueryData('existingCustomer', found[0])\n        }\n    }, []);\n\n    // DATA MUTATIONS\n    const createJob = useMutation(job => API.createJob(job), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n    const editJob = useMutation(job => API.updateJob(job.id, job.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n    const deleteJob = useMutation(id => API.deleteJob(id), {\n        onSuccess: () => {\n            qc.invalidateQueries('jobs');\n        }\n    });\n    const createCustomer = useMutation(customer => API.createCustomer(customer), {\n        onSuccess: () => {\n            qc.invalidateQueries('customers');\n        }\n    });\n    const editCustomer = useMutation(customer => API.updateCustomer(customer.id, customer.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('customers');\n        }\n    });\n    const deleteRequest = useMutation(id => API.deleteRequest(id), {\n        onSuccess: () => {\n            qc.invalidateQueries('requests');\n        }\n    })\n\n    // EVENT HANDLERS\n    const removeJob = id => {\n        let answer = window.confirm(\"Are you sure you want to delete?\\nThis cannot be undone.\");\n        if (answer) deleteJob.mutate(id);\n        addToast(\"Job Deleted\");\n    };\n    const removeRequest = id => {\n        deleteRequest.mutate(id);\n    };\n    const submit = async e => {\n        e.preventDefault();\n        try {\n            const formData = Object.fromEntries(new FormData(e.target));\n            const jobData = {\n                status: formData.status,\n                serviceDate: formData.serviceDate,\n                invoiceNumber: formData.invoiceNumber.trim(),\n                issueNotes: formData.issueNotes.trim(),\n                serviceNotes: formData.serviceNotes.trim(),\n                totalBill: parseFloat(formData.totalBill.trim()),\n                isPaid: formData.isPaid === \"on\",\n            }\n            const customerData = {\n                businessName: formData.businessName.trim(),\n                contactName: formData.contactName.trim(),\n                phone: formData.phone.trim(),\n                address: {\n                    street1: formData.street1.trim(),\n                    street2: formData.street2.trim(),\n                    city: formData.city.trim(),\n                    state: formData.state.trim(),\n                    zipcode: formData.zipcode.trim()\n                },\n            }\n            if (submissionType === 'add') {\n                editCustomer.mutate({ id: customer._id, data: customerData});\n                createJob.mutate({ customer: customer._id, ...jobData });\n                if(deleteReq) {\n                    removeRequest(job._id)\n                    qc.setQueryData('deleteRequest', null);\n                    qc.setQueryData('view', 'requests');\n                    return;\n                }\n                qc.setQueryData('view', 'default');\n                return\n            }\n            if (submissionType === 'edit') {\n                editCustomer.mutate({ id: customer._id, data: customerData});\n                editJob.mutate({ id: job._id, data: jobData });\n                qc.setQueryData('view', 'default');\n                return\n            }\n            if (submissionType === 'new') {\n                const newCustomer = await createCustomer.mutateAsync(customerData);\n                createJob.mutate({ customer: newCustomer.data._id, ...jobData });\n                if(deleteReq) {\n                    removeRequest(job._id)\n                    qc.setQueryData('deleteRequest', null);\n                    qc.setQueryData('view', 'requests');\n                    return;\n                }\n                qc.setQueryData('view', 'default');\n            }\n        } catch(err) { console.error(err) }\n    };\n    const useExisting = () => {\n        qc.setQueryData('submissionType', 'add');\n        qc.setQueryData('selectedCustomer', {\n            ...customer,\n            _id: existingCustomer._id,\n            businessName: existingCustomer.businessName,\n            address: existingCustomer.address\n        });\n        qc.setQueryData('existingCustomer', null)\n    }\n\n    switch (status) {\n        case \"loading\":\n            return <h1>Loading</h1>;\n        case \"error\":\n            return <h4>Error: {error.message}</h4>;\n        default:\n            if (existingCustomer) {\n                return (\n                    <section>\n                        <div className={\"use-existing-customer\"}>\n                            <h4>The address matches an existing customer:</h4>\n                            <p className={\"match\"}>\n                                <strong>{existingCustomer.businessName}</strong><br/>\n                                {existingCustomer.address.street1} {existingCustomer.address.street2 ? (\", \" + existingCustomer.address.street2) : <></>}<br/>\n                                {existingCustomer.address.city}, {existingCustomer.address.state} {existingCustomer.address.zipcode}\n                            </p>\n                            <div>\n                                <p>Add this job to <strong>{existingCustomer.businessName}</strong>?</p>\n                                <button onClick={useExisting}>Yes</button>\n                                <button onClick={() => qc.setQueryData('existingCustomer', null)}>No</button>\n                            </div>\n                        </div>\n                    </section>\n                )\n            } else {\n                return (\n                    <section>\n                        <form id={\"form-service\"} onSubmit={submit}>\n                            <div className={\"job-area\"}>\n                                <label>\n                                    Service Date\n                                    <input className={\"input-sm\"} type={\"date\"} name={\"serviceDate\"}\n                                           defaultValue={job ? job.serviceDate : \"\"}/>\n                                </label>\n\n                                <label>\n                                    Status\n                                    <div className={\"dropdown\"}>\n                                        <FontAwesomeIcon className={\"faChevronDown\"} icon={faChevronDown}/>\n                                        <select name={\"status\"}>\n                                            {job ? <option>{job.status}</option> : <></>}\n                                            {job && job.status === \"Pending\" ? \"\" : <option>Pending</option>}\n                                            {job && job.status === \"Scheduled\" ? \"\" : <option>Scheduled</option>}\n                                            {job && job.status === \"Completed\" ? \"\" : <option>Completed</option>}\n                                            {job && job.status === \"Canceled\" ? \"\" : <option>Canceled</option>}\n                                        </select>\n                                    </div>\n                                </label>\n\n                                <label>\n                                    Invoice\n                                    <div className={\"invoiceInput\"}>\n                                        <FontAwesomeIcon className={\"faHashtag\"} icon={faHashtag}/>\n                                        <input type={\"text\"} name={\"invoiceNumber\"}\n                                               defaultValue={job ? job.invoiceNumber : \"\"}/>\n                                    </div>\n\n                                </label>\n\n                                <label>\n                                    Total Bill\n                                    <div className={\"dollarInput\"}>\n                                        <FontAwesomeIcon className={\"faDollarSign\"} icon={faDollarSign}/>\n                                        <input type={\"text\"} name={\"totalBill\"}\n                                               defaultValue={job ? dollarUSLocale.format(job.totalBill) : \"0\"}/>\n                                    </div>\n                                </label>\n\n                                <label className={\"text-center\"}>\n                                    Paid?\n                                    <input className={\"checkbox\"} type={\"checkbox\"} name={\"isPaid\"}\n                                           defaultChecked={job && job.isPaid === true ? \"on\" : undefined}/>\n                                </label>\n                            </div>\n\n                            <div className={\"customer-area\"}>\n                                <div>\n                                    <label>\n                                        Contact Information\n                                        {view !== 'requests' && existingCustomer ? (\n                                            <AutoComplete />\n                                        ) : (\n                                            <input type={\"text\"} name={\"businessName\"} placeholder={\"Business Name\"} required\n                                                   defaultValue={customer ? customer.businessName : \"\"}/>\n                                        )}\n                                        <input type={\"text\"} name={\"contactName\"} placeholder={\"Contact Person\"}\n                                               defaultValue={customer ? customer.contactName : \"\"}/>\n                                        <input type={\"text\"} name={\"phone\"} placeholder={\"Phone #\"} required\n                                               defaultValue={customer ? customer.phone : \"\"}/>\n                                    </label>\n                                </div>\n\n                                <div>\n                                    <label className={\"address\"}>\n                                        Address\n                                        <input type={\"text\"} name={\"street1\"} placeholder={\"Street Address\"} required\n                                               defaultValue={customer ? customer.address.street1 : \"\"}/>\n                                        <input type={\"text\"} name={\"street2\"} placeholder={\"Unit or Building #\"}\n                                               defaultValue={customer ? customer.address.street2 : \"\"}/>\n                                        <div>\n                                            <input type={\"text\"} name={\"city\"} placeholder={\"City\"} required\n                                                   defaultValue={customer ? customer.address.city : \"\"}/>\n                                            <input className={\"text-center\"} type={\"text\"} name={\"state\"} defaultValue={\"CA\"} required/>\n                                            <input type={\"text\"} name={\"zipcode\"} placeholder={\"Zip Code\"} required\n                                                   defaultValue={customer ? customer.address.zipcode : \"\"}/>\n                                        </div>\n                                    </label>\n                                </div>\n                            </div>\n\n                            <div className={\"notes-area\"}>\n                                <label>\n                                    Description of Problem\n                                    <textarea name={\"issueNotes\"} defaultValue={job ? job.issueNotes : \"\"}/>\n                                </label>\n\n                                <label>\n                                    Service Notes\n                                    <textarea name={\"serviceNotes\"} defaultValue={job ? job.serviceNotes : \"\"}/>\n                                </label>\n                            </div>\n\n                            <div className={\"button-area\"}>\n                                <button className={\"btn-form\"} type={\"submit\"}>\n                                    Save\n                                </button>\n\n                                <button className={\"btn-form\"} onClick={() => {\n                                    const location = window.location.pathname;\n                                    if (location === '/customers') {\n                                        qc.setQueryData('selectedJob', null);\n                                        qc.setQueryData('view', 'customerForm');\n                                    } else {\n                                        qc.setQueryData('selectedCustomer', null);\n                                        qc.setQueryData('selectedJob', null);\n                                        qc.setQueryData('view', 'default');\n                                    }\n                                }}>\n                                    Cancel\n                                </button>\n\n                                {job && job._id ? (<button className={\"btn-form delete\"} onClick={() => {\n                                    if (view === 'requests') {\n                                        removeRequest(job._id)\n                                    } else {\n                                        removeJob(job._id);\n                                    }\n                                    qc.setQueryData('selectedCustomer', null);\n                                    qc.setQueryData('selectedJob', null);\n                                    qc.setQueryData('view', 'default');\n                                }}>\n                                    Delete\n                                </button>) : <></>}\n                            </div>\n                        </form>\n                    </section>\n                );\n            }\n    }\n}\n\nexport default ServiceForm;","import { Redirect } from 'react-router-dom';\nimport { useData, useMessages, useJobs, useUser, useRequests, useParts } from '../../react-query';\nimport { Calendar, Header, MessageTable, Notifications, Revenue } from './sections';\nimport { ServiceForm } from '../Service/sections';\nimport './style.scss';\n\nconst DashboardPage = () => {\n    const { user } = useUser();\n    const { status: msgStatus, data: messages, error: msgError } = useMessages();\n    const { status: reqStatus, data: requests, error: reqError } = useRequests();\n    const { status: jobStatus, data: jobs, error: jobError } = useJobs();\n    const { status: partStatus, data: parts, error: partError } = useParts();\n    const view = useData('view');\n\n    // REDIRECTS\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(jobStatus || msgStatus || reqStatus || partStatus) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {jobError.message} | {msgError.message} | {reqError.message} | {partError.message}</h4>;\n        default:\n            if (view === 'messages') {\n                return (\n                    <main className={\"container\"} id={\"dashboard\"}>\n                        <Header />\n                        <MessageTable messages={messages.data} />\n                    </main>\n                )\n            } else if (view === 'serviceForm') {\n                return (\n                    <main className={\"container\"} id={\"dashboard\"}>\n                        <Header />\n                        <ServiceForm />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"} id={\"dashboard\"}>\n                        <Header />\n                        <div className={\"dashboard-top\"}>\n                            <Notifications\n                                jobs={jobStatus === 'success' ? jobs.data.filter(job => job.status === 'Pending') : []}\n                                requests={reqStatus === 'success' ? requests.data : []}\n                                messages={msgStatus === 'success' ? messages.data.filter(msg => !msg.read) : []}\n                                parts={partStatus === 'success' ? parts.data.filter(part => part.stock < part.minimum) : []}\n                            />\n\n                            <Revenue jobs={jobs.data.filter(job => job.status === 'Completed')} />\n                        </div>\n                        <Calendar jobs={jobs.data}/>\n                    </main>\n                )\n            }\n    }\n}\n\nexport default DashboardPage;","import { Redirect } from 'react-router-dom';\nimport { useUser, useData, useJobs, useRequests } from '../../react-query';\nimport { Header, ServiceTable, RequestTable, UnpaidTable, ServiceForm } from './sections';\nimport './style.scss';\n\nconst ServicePage = () => {\n    const { user } = useUser();\n    const { status: jobStatus, data: jobs, error: jobError } = useJobs();\n    const { status: reqStatus, data: requests, error: reqError } = useRequests();\n    const view = useData('view');\n\n    // REDIRECTS\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(jobStatus || reqStatus) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {jobError.message} {reqError.message}</h4>;\n        default:\n            if (view === 'serviceForm') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <ServiceForm />\n                    </main>\n                )\n            } else if (view === 'requests') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <RequestTable requests={requests.data} />\n                    </main>\n                )\n            } else if (view === 'unpaid') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <UnpaidTable jobs={jobs.data} />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <ServiceTable jobs={jobs.data} />\n                    </main>\n                )\n            }\n    }\n}\n\nexport default ServicePage;\n","import { useQueryClient } from 'react-query';\nimport { useData } from '../../../react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n    const view = useData('view');\n\n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => {\n                qc.setQueryData('view', 'default');\n            }}>Customers</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'default');\n                }}>View All</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('submissionType', 'new');\n                    qc.setQueryData('selectedCustomer', null);\n\n                    if (view === 'customerForm') {\n                        const formFields = document.querySelectorAll('input, textarea');\n                        for (let field of formFields) field.value = \"\";\n                    } else {\n                        qc.setQueryData('view', 'customerForm');\n                    }\n                }}>Create New</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Searchbar } from '../../../components';\n\nconst CustomersTable = ({ customers }) => {\n    const qc = useQueryClient();\n    const [customerList, setCustomerList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Search for customers\n    useEffect(() => {\n            if (searchTerm === \"\") {\n                setCustomerList(customers);\n                return;\n            }\n            setCustomerList(\n                customers.filter(customer => {\n                    return customer.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        customer.address.city.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        customer.phone.includes(searchTerm)\n                })\n            );\n    }, [searchTerm, customers]);\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-customer\"}>\n                    <th>Business Name</th>\n                    <th>Address</th>\n                    <th className={\"text-center\"}>Contact</th>\n                    <th className={\"text-center\"}>Phone #</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {customerList.map(customer => (\n                    <tr className={\"table-item tr-customer clickable\"} key={customer._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'edit');\n                        qc.setQueryData('selectedCustomer', customer);\n                        qc.setQueryData('view', 'customerForm');\n                    }}>\n                        <td>{customer.businessName}</td>\n                        <td>\n                            {customer.address.street1}\n                            {customer.address.street2 !== \"\" ? \", \" + customer.address.street2 + \", \" : \", \"}\n                            {customer.address.city}, {customer.address.state} {customer.address.zipcode}\n                        </td>\n                        <td className={\"text-center\"}>{customer.contactName ? customer.contactName : \"--\"}</td>\n                        <td className={\"text-center\"}>{customer.phone}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {customerList.length < 1 ? <p className={\"empty\"}>** No customers to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default CustomersTable;\n\n// TODO: add pagination for displaying data","import { useMutation, useQueryClient } from 'react-query';\nimport { useData, useToast } from '../../../react-query';\nimport API from '../../../utils/API';\n\nconst CustomerForm = () => {\n    const qc = useQueryClient();\n    const { addToast } = useToast();\n    const customer = useData('selectedCustomer');\n    const submissionType = useData('submissionType');\n\n    // DATA MUTATIONS\n    const createCustomer = useMutation(customer => API.createCustomer(customer), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"customers\");\n        }\n    });\n    const editCustomer = useMutation(customer => API.updateCustomer(customer.id, customer.data), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"customers\");\n            qc.invalidateQueries(\"jobs\");\n        }\n    });\n    const deleteCustomer = useMutation(id => API.deleteCustomer(id), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"customers\");\n        },\n    });\n    const deleteJobs = useMutation(id => API.deleteJobsByCustomerId(id), {\n        onSuccess: () => {\n            qc.invalidateQueries(\"jobs\");\n        }\n    });\n\n    // EVENT LISTENERS\n    const removeCustomer = async () => {\n        // TODO: create custom modal for confirmation so the page doesn't reload.\n        let answer = window.confirm(\"Are you sure you want to delete?\\n\" +\n            \"This will delete the customer and their service history from the database.\\n\" +\n            \"This cannot be undone.\");\n        if (answer) {\n            await deleteCustomer.mutate(customer._id);\n            deleteJobs.mutate(customer._id);\n            qc.setQueryData('selectedCustomer', null);\n            qc.setQueryData('view', 'default');\n        }\n        addToast(\"Customer Deleted\");\n    }\n    const submitForm = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const customerData = {\n                businessName: formData.businessName.trim(),\n                contactName: formData.contactName.trim(),\n                phone: formData.phone.trim(),\n                address: {\n                    street1: formData.street1.trim(),\n                    street2: formData.street2.trim(),\n                    city: formData.city.trim(),\n                    state: formData.state.trim(),\n                    zipcode: formData.zipcode.trim()\n                },\n                notes: formData.notes.trim()\n            }\n            if (submissionType === 'edit') {\n                editCustomer.mutate({ id: customer._id, data: customerData});\n                qc.setQueryData('view', 'default');\n                return\n            }\n            if (submissionType === 'new') {\n                await createCustomer.mutateAsync(customerData);\n                qc.setQueryData('view', 'default');\n            }\n        } catch(err) { console.error(err) }\n    };\n\n    return (\n        <section>\n            <form id={\"form-customer\"} onSubmit={submitForm}>\n                <div className={\"customer-area\"}>\n                    <div>\n                        <label>\n                            Contact Information\n                            <input type={\"text\"} name={\"businessName\"} placeholder={\"Business Name\"} required\n                                   defaultValue={customer ? customer.businessName : \"\"}/>\n                            <input type={\"text\"} name={\"contactName\"} placeholder={\"Contact Person\"}\n                                   defaultValue={customer ? customer.contactName : \"\"}/>\n                            <input type={\"text\"} name={\"phone\"} placeholder={\"Phone #\"} required\n                                   defaultValue={customer ? customer.phone : \"\"}/>\n                        </label>\n                    </div>\n\n                    <div>\n                        <label className={\"address\"}>\n                            Address\n                            <input type={\"text\"} name={\"street1\"} placeholder={\"Street Address\"} required\n                                   defaultValue={customer ? customer.address.street1 : \"\"}/>\n                            <input type={\"text\"} name={\"street2\"} placeholder={\"Unit or Building #\"}\n                                   defaultValue={customer ? customer.address.street2 : \"\"}/>\n                            <div>\n                                <input type={\"text\"} name={\"city\"} placeholder={\"City\"} required\n                                       defaultValue={customer ? customer.address.city : \"\"}/>\n                                <input className={\"text-center\"} type={\"text\"} name={\"state\"} defaultValue={\"CA\"} required/>\n                                <input type={\"text\"} name={\"zipcode\"} placeholder={\"Zip Code\"} required\n                                       defaultValue={customer ? customer.address.zipcode : \"\"}/>\n                            </div>\n                        </label>\n                    </div>\n                </div>\n\n                <div className={\"notes-area\"}>\n                    <label>\n                        Notes\n                        <textarea name={\"notes\"} defaultValue={customer ? customer.notes : \"\"} />\n                    </label>\n                </div>\n\n                <div className={\"button-area\"}>\n                    <button className={\"btn-form\"} type={\"submit\"}>\n                        Save\n                    </button>\n\n                    <button className={\"btn-form\"} onClick={() => {\n                        qc.setQueryData('selectedCustomer', null);\n                        qc.setQueryData('view', 'default');\n                    }}>\n                        Cancel\n                    </button>\n\n                    {customer && customer._id ? (<button className={\"btn-form delete\"} onClick={removeCustomer}>\n                        Delete\n                    </button>) : <></>}\n                </div>\n            </form>\n        </section>\n    )\n}\n\nexport default CustomerForm;\n","import { useEffect, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport dayjs from 'dayjs';\n\nconst CustomerHistory = ({ jobs, customerId }) => {\n    const qc = useQueryClient();\n    const [jobList, setJobList] = useState([]);\n\n    useEffect(() => {\n        const history = jobs.filter(job => job.customer._id === customerId && job.status === 'Completed');\n        setJobList(history);\n    }, [customerId, jobs])\n\n    return (\n        <section className={\"customer-history\"}>\n            <h2>Service History</h2>\n            <table>\n                <thead>\n                <tr className={\"tr-history\"}>\n                    <th className={\"text-center\"}>Date Completed</th>\n                    <th>Service Notes</th>\n                </tr>\n                </thead>\n\n                <tbody className={\"tbody-history\"}>\n                {jobList.map(job => (\n                    <tr className={\"table-item clickable tr-history\"} key={job._id} onClick={() => {\n                        qc.setQueryData('submissionType', 'edit');\n                        qc.setQueryData('selectedJob', job);\n                        qc.setQueryData('view', 'serviceForm');\n                    }}>\n                        <td className={\"text-center\"}>{job.serviceDate ? dayjs(job.serviceDate).format(\"MMM DD YYYY\") : \"--\"}</td>\n                        <td>{job.serviceNotes ? job.serviceNotes : \"\"}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {jobList.length < 1 ? <p className={\"empty\"}>** No job history to display **</p> : <></>}\n        </section>\n    )\n}\n\nexport default CustomerHistory;\n","import { Redirect } from 'react-router-dom';\nimport { useData, useCustomers, useUser, useJobs } from '../../react-query';\nimport { Header, CustomersTable, CustomerHistory, CustomerForm } from './sections';\nimport { ServiceForm } from '../Service/sections';\nimport './style.scss';\n\nconst CustomerPage = () => {\n    const { user } = useUser();\n    const { status: customerStatus, data: customers, error: customerError } = useCustomers();\n    const { status: jobStatus, data: jobs, error: jobError } = useJobs();\n    const customer = useData('selectedCustomer');\n    const view = useData('view');\n\n    // REDIRECT\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(customerStatus || jobStatus) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {customerError.message} {jobError.message}</h4>;\n        default:\n            if (view === 'customerForm') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <CustomerForm />\n                        {customer ? <CustomerHistory jobs={jobs.data} customerId={customer._id} /> : <></>}\n                    </main>\n                )\n            } else if (view === 'serviceForm') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <ServiceForm />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <CustomersTable customers={customers.data} />\n                    </main>\n                )\n            }\n    }\n}\n\nexport default CustomerPage;\n","import { useQueryClient } from 'react-query';\n\nconst Header = () => {\n    const qc = useQueryClient();\n\n    return (\n        <div className={\"main-header\"}>\n            <h1 onClick={() => {\n                qc.setQueryData('view', 'default');\n            }}>Inventory</h1>\n\n            <div className={\"button-area\"}>\n                <p className={\"btn\"} onClick={() => {\n                    qc.refetchQueries('parts');\n                    qc.setQueryData('view', 'default');\n                }}>View All</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('view', 'restock');\n                }}>View Low Stock</p>\n\n                <p className={\"btn\"} onClick={() => {\n                    qc.setQueryData('submissionType', 'new');\n                    qc.setQueryData('view', 'newPart');\n                }}>Create New</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport { useQueryClient, useMutation } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport API from '../../../utils/API';\n\nconst InventoryTable = ({ parts }) => {\n    const qc = useQueryClient();\n    const [partList, setPartList] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Search for parts\n    useEffect(() => {\n            if (searchTerm === \"\") {\n                setPartList(parts);\n                return;\n            }\n            setPartList(\n                parts.filter(part => {\n                    return part.partNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        part.description.toLowerCase().includes(searchTerm.toLowerCase());\n                })\n            );\n    }, [searchTerm, parts]);\n\n    // DATA MUTATIONS\n    const update = useMutation(part => API.updatePart(part.id, part.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('parts');\n        }\n    });\n\n    // EVENT LISTENERS\n    const changeQuantity = (e, part) => {\n        const operator = e.target.innerHTML;\n        if (operator === '+') {\n            update.mutate({ id: part._id,  data: {...part, stock: part.stock + 1} });\n        } else {\n            update.mutate({ id: part._id,  data: {...part, stock: part.stock - 1} });\n        }\n    }\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-part\"}>\n                    <th>Part #</th>\n                    <th>Description</th>\n                    <th className={\"text-center\"}>In Stock</th>\n                    <th className={\"text-center\"}>Change Quantity</th>\n                    <th className={\"text-center\"}>Edit</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {partList.map(part => (\n                    <tr className={\"table-item tr-part\"} key={part._id} id={part._id}>\n                        <td>{part.partNumber}</td>\n                        <td>{part.description}</td>\n                        <td className={`text-center ${part.stock < part.minimum ? \"red bold\" : \"\"}`}>{part.stock}</td>\n                        <td className={\"inventory-buttons\"}>\n                            <div className={\"quantity\"} onClick={e => changeQuantity(e, part)}>&#43;</div>\n                            <div className={\"quantity\"} onClick={e => changeQuantity(e, part)}>&#8722;</div>\n                        </td>\n                        <td className={\"inventory-buttons\"}>\n                            <div className={\"select\"} onClick={() => {\n                                qc.setQueryData('submissionType', 'edit');\n                                qc.setQueryData('selectedPart', part);\n                                qc.setQueryData('view', 'newPart');\n                            }}><FontAwesomeIcon icon={faEdit}/></div>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {partList.length < 1 ? <p className={\"empty\"}>** No parts to display **</p> : <></>}\n        </section>\n    );\n}\n\nexport default InventoryTable;","import { useState, useEffect } from 'react';\nimport { useQueryClient, useMutation } from 'react-query';\nimport { Searchbar } from '../../../components';\nimport API from '../../../utils/API';\n\nconst RestockTable = ({ parts }) => {\n    const qc = useQueryClient();\n    const [partList, setPartList] = useState(parts);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Filter for parts below minimum stock\n    useEffect(() => {\n        setPartList(parts.filter(part => part.stock < part.minimum));\n    }, [parts]);\n\n    // DATA MUTATIONS\n    const update = useMutation(part => API.updatePart(part.id, part.data), {\n        onSuccess: () => {\n            qc.invalidateQueries('parts');\n        }\n    });\n\n    // EVENT LISTENERS\n    const changeQuantity = (e, part) => {\n        const operator = e.target.innerHTML;\n        if (operator === '+') {\n            update.mutate({ id: part._id,  data: {...part, stock: part.stock + 1} });\n        } else {\n            update.mutate({ id: part._id,  data: {...part, stock: part.stock - 1} });\n        }\n    }\n\n    return (\n        <section>\n            <div className={\"section-header\"}>\n                <div>\n                    <Searchbar\n                        placeholder={\"Search\"}\n                        setSearch={setSearchTerm}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                <tr className={\"tr-restock\"}>\n                    <th>Part #</th>\n                    <th>Description</th>\n                    <th className={\"text-center\"}>In Stock</th>\n                    <th />\n                </tr>\n                </thead>\n\n                <tbody>\n                {partList.map(part => (\n                    <tr className={\"table-item tr-restock\"} key={part._id} id={part._id}>\n                        <td>{part.partNumber}</td>\n                        <td>{part.description}</td>\n                        <td className={\"text-center\"}>{part.stock}</td>\n                        <td>\n                            <p className={\"warning\"}>\n                                desired minimum: {part.minimum}\n                            </p>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {partList.length < 1 ? <p className={\"empty\"}>** No parts to display **</p> : <></>}\n        </section>\n    );\n}\n\nexport default RestockTable;","import { useData, useToast } from '../../../react-query';\nimport { useMutation, useQueryClient } from 'react-query';\nimport API from '../../../utils/API';\n\nconst PartForm = () => {\n    const queryClient = useQueryClient();\n    const { addToast } = useToast();\n    const part = useData('selectedPart');\n    const submissionType = useData('submissionType');\n\n    // MUTATIONS\n    const createPart = useMutation(part => API.createPart(part), {\n        onSuccess: () => {\n            queryClient.invalidateQueries('parts');\n        }\n    });\n    const updatePart = useMutation(part => API.updatePart(part.id, part.data), {\n        onSuccess: () => {\n            queryClient.invalidateQueries('parts');\n        }\n    });\n    const deletePart = useMutation(id => API.deletePart(id), {\n        onSuccess: () => {\n            queryClient.invalidateQueries('parts');\n        }\n    });\n\n    // EVENT HANDLERS\n    const submit = async e => {\n        try {\n            e.preventDefault();\n            const formData = Object.fromEntries(new FormData(e.target));\n            const partData = {\n                partNumber: formData.partNumber.toUpperCase().trim(),\n                description: formData.description.trim(),\n                stock: parseInt(formData.stock),\n                minimum: parseInt(formData.minimum)\n            }\n            if (submissionType === 'edit') {\n                await updatePart.mutate({id: part._id, data: partData});\n                queryClient.setQueryData('showPartForm', false);\n                return\n            }\n            if (submissionType === 'new') {\n                await createPart.mutate(partData);\n                queryClient.setQueryData('showPartForm', false);\n            }\n        } catch (err) { console.error(err) }\n    };\n\n    const removePart = (id) => {\n        let answer = window.confirm(\"Are you sure you want to delete?\\nThis cannot be undone.\");\n        if (answer) deletePart.mutate(id);\n        addToast(\"Part Deleted\");\n    }\n\n    return (\n        <section>\n            <form id={\"form-part\"} onSubmit={submit}>\n                <div>\n                    <label className={\"text-center\"}>\n                        Part #\n                        <input className={\"text-center\"} type={\"text\"} name={\"partNumber\"}\n                               placeholder={\"Part #\"}\n                               defaultValue={part ? part.partNumber : \"\"}\n                        />\n                    </label>\n                    <label>\n                        Description\n                        <input type={\"text\"} name={\"description\"}\n                               placeholder={\"Description\"}\n                               defaultValue={part ? part.description : \"\"}\n                        />\n                    </label>\n                    <label className={\"text-center\"}>\n                        In Stock\n                        <input className={\"text-center\"} type={\"text\"} name={\"stock\"}\n                               placeholder={\"#\"}\n                               defaultValue={part ? part.stock : \"\"}\n                        />\n                    </label>\n                </div>\n\n                <div>\n                    <label className={\"stock-notification\"}>\n                        Notify me when stock drops below:\n                        <input className={\"text-center\"} type={\"text\"} name={\"minimum\"}\n                               placeholder={\"#\"}\n                               defaultValue={part ? part.minimum : \"\"}\n                        />\n                    </label>\n                </div>\n\n                <div className={\"button-area\"}>\n                    <button className={\"btn-form\"} type={\"submit\"}>\n                        Save\n                    </button>\n\n                    <button\n                        className={\"btn-form\"}\n                        onClick={() => {\n                            queryClient.removeQueries('selectedPart');\n                            queryClient.setQueryData('view', 'inventory');\n                        }}\n                    >Cancel\n                    </button>\n\n                    {part && part._id ? (<button className={\"btn-form delete\"} onClick={() => {\n                        removePart(part._id);\n                        queryClient.removeQueries('selectedCustomer');\n                        queryClient.removeQueries('selectedJob');\n                        queryClient.setQueryData('view', 'inventory');\n                    }}>\n                        Delete\n                    </button>) : <></>}\n                </div>\n            </form>\n        </section>\n    )\n}\n\nexport default PartForm;","import { Redirect } from \"react-router-dom\";\nimport { useData, useUser, useParts } from '../../react-query';\nimport { Header, InventoryTable, RestockTable, PartForm } from './sections';\nimport './style.scss';\n\nconst InventoryPage = () => {\n    const { user } = useUser();\n    const { status, data: parts, error, isFetching } = useParts();\n    const view = useData('view');\n\n    // REDIRECTS\n    if (!user) {\n        return <Redirect to={'/'} />\n    }\n\n    switch(status) {\n        case \"loading\":\n            return <h1 className=\"text-center\">Loading</h1>;\n        case \"error\":\n            return <h4 className=\"text-center\">Error: {error.message}</h4>;\n        default:\n            if (view === 'restock') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <RestockTable parts={parts.data} />\n                    </main>\n                )\n            } else if (view === 'newPart') {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <PartForm />\n                    </main>\n                )\n            } else {\n                return (\n                    <main className={\"container\"}>\n                        <Header />\n                        <InventoryTable parts={parts.data} />\n                    </main>\n                )\n            }\n    }\n}\n\nexport default InventoryPage;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Customers, Dashboard, Inventory, Login, Register, Service } from \"../pages\";\nimport { SideNavbar, Toast } from '../components';\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path='/' component={Login}/>\n                <Route exact path='/login' component={Login}/>\n                <>\n                    <SideNavbar />\n                    <Route exact path='/register' component={Register}/>\n                    <Route exact path='/dashboard' component={Dashboard}/>\n                    <Route exact path='/customers' component={Customers}/>\n                    <Route exact path='/service' component={Service}/>\n                    <Route exact path='/inventory' component={Inventory}/>\n                </>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default Routes;\n","import { ReactQueryDevtools } from 'react-query/devtools';\nimport { QueryClientProvider } from 'react-query';\nimport { queryClient } from '../react-query';\nimport { Toast } from '../components';\nimport Routes from \"./routes\";\nimport './style/main.scss';\n\nconst App = () => {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <Routes />\n            <Toast />\n            <ReactQueryDevtools/>\n        </QueryClientProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}